-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transform_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    inputImage_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    inputImage_data_stream_0_V_empty_n : IN STD_LOGIC;
    inputImage_data_stream_0_V_read : OUT STD_LOGIC;
    inputImage_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    inputImage_data_stream_1_V_empty_n : IN STD_LOGIC;
    inputImage_data_stream_1_V_read : OUT STD_LOGIC;
    inputImage_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    inputImage_data_stream_2_V_empty_n : IN STD_LOGIC;
    inputImage_data_stream_2_V_read : OUT STD_LOGIC;
    I_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    I_V_V_full_n : IN STD_LOGIC;
    I_V_V_write : OUT STD_LOGIC;
    I_COPY_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    I_COPY_V_V_full_n : IN STD_LOGIC;
    I_COPY_V_V_write : OUT STD_LOGIC;
    I_2_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    I_2_V_V_full_n : IN STD_LOGIC;
    I_2_V_V_write : OUT STD_LOGIC;
    ONES_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ONES_V_V_full_n : IN STD_LOGIC;
    ONES_V_V_write : OUT STD_LOGIC );
end;


architecture behav of transform_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv17_1FA40 : STD_LOGIC_VECTOR (16 downto 0) := "11111101001000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv50_1010102 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000010000000100000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal inputImage_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputImage_data_stream_1_V_blk_n : STD_LOGIC;
    signal inputImage_data_stream_2_V_blk_n : STD_LOGIC;
    signal I_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln25_reg_252_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal I_COPY_V_V_blk_n : STD_LOGIC;
    signal I_2_V_V_blk_n : STD_LOGIC;
    signal ONES_V_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_125 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln25_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln25_reg_252_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_252_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_142_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_23_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_266 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_V_1_fu_175_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_V_1_reg_271 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_fu_182_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_reg_276 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_V_202_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_V_fu_148_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1148_fu_159_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1148_fu_159_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_fu_182_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1116_fu_178_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_182_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln718_fu_188_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_fu_212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln412_fu_237_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln_fu_203_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_fu_241_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1148_fu_159_p10 : STD_LOGIC_VECTOR (49 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_125 <= add_ln25_fu_142_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_125 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_252_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_V_1_reg_271 <= i_V_1_fu_175_p1;
                r_1_reg_283 <= r_1_fu_192_p2;
                r_V_reg_276 <= r_V_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_252 <= icmp_ln25_fu_136_p2;
                icmp_ln25_reg_252_pp0_iter1_reg <= icmp_ln25_reg_252;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln25_reg_252_pp0_iter2_reg <= icmp_ln25_reg_252_pp0_iter1_reg;
                icmp_ln25_reg_252_pp0_iter3_reg <= icmp_ln25_reg_252_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_23_reg_261 <= inputImage_data_stream_2_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_252_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_266 <= mul_ln1148_fu_159_p2(49 downto 32);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln25_fu_136_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln25_fu_136_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln25_fu_136_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    I_2_V_V_blk_n_assign_proc : process(I_2_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            I_2_V_V_blk_n <= I_2_V_V_full_n;
        else 
            I_2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    I_2_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_fu_241_p2),32));

    I_2_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            I_2_V_V_write <= ap_const_logic_1;
        else 
            I_2_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    I_COPY_V_V_blk_n_assign_proc : process(I_COPY_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            I_COPY_V_V_blk_n <= I_COPY_V_V_full_n;
        else 
            I_COPY_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    I_COPY_V_V_din <= tmp_V_202_fu_198_p1;

    I_COPY_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            I_COPY_V_V_write <= ap_const_logic_1;
        else 
            I_COPY_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    I_V_V_blk_n_assign_proc : process(I_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            I_V_V_blk_n <= I_V_V_full_n;
        else 
            I_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    I_V_V_din <= tmp_V_202_fu_198_p1;

    I_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            I_V_V_write <= ap_const_logic_1;
        else 
            I_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    ONES_V_V_blk_n_assign_proc : process(ONES_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ONES_V_V_blk_n <= ONES_V_V_full_n;
        else 
            ONES_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ONES_V_V_din <= ap_const_lv32_10000;

    ONES_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ONES_V_V_write <= ap_const_logic_1;
        else 
            ONES_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln25_fu_142_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_125) + unsigned(ap_const_lv17_1));
    and_ln412_fu_231_p2 <= (tmp_22_fu_224_p3 and r_fu_219_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inputImage_data_stream_0_V_empty_n, inputImage_data_stream_1_V_empty_n, inputImage_data_stream_2_V_empty_n, I_V_V_full_n, I_COPY_V_V_full_n, I_2_V_V_full_n, ONES_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_252, ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = ONES_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_2_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_COPY_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_V_V_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inputImage_data_stream_0_V_empty_n, inputImage_data_stream_1_V_empty_n, inputImage_data_stream_2_V_empty_n, I_V_V_full_n, I_COPY_V_V_full_n, I_2_V_V_full_n, ONES_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_252, ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = ONES_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_2_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_COPY_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_V_V_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inputImage_data_stream_0_V_empty_n, inputImage_data_stream_1_V_empty_n, inputImage_data_stream_2_V_empty_n, I_V_V_full_n, I_COPY_V_V_full_n, I_2_V_V_full_n, ONES_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_252, ap_enable_reg_pp0_iter4, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = ONES_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_2_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_COPY_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_V_V_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(inputImage_data_stream_0_V_empty_n, inputImage_data_stream_1_V_empty_n, inputImage_data_stream_2_V_empty_n, icmp_ln25_reg_252)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln25_reg_252 = ap_const_lv1_0) and (inputImage_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(I_V_V_full_n, I_COPY_V_V_full_n, I_2_V_V_full_n, ONES_V_V_full_n, icmp_ln25_reg_252_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= (((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = ONES_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_2_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_COPY_V_V_full_n)) or ((icmp_ln25_reg_252_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_V_V_full_n)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln25_fu_136_p2)
    begin
        if ((icmp_ln25_fu_136_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
        i_V_1_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_266),24));

    i_V_fu_148_p3 <= (tmp_23_reg_261 & ap_const_lv16_0);
    icmp_ln25_fu_136_p2 <= "1" when (indvar_flatten_reg_125 = ap_const_lv17_1FA40) else "0";

    inputImage_data_stream_0_V_blk_n_assign_proc : process(inputImage_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_252)
    begin
        if (((icmp_ln25_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inputImage_data_stream_0_V_blk_n <= inputImage_data_stream_0_V_empty_n;
        else 
            inputImage_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inputImage_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_252, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_252 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inputImage_data_stream_0_V_read <= ap_const_logic_1;
        else 
            inputImage_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    inputImage_data_stream_1_V_blk_n_assign_proc : process(inputImage_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_252)
    begin
        if (((icmp_ln25_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inputImage_data_stream_1_V_blk_n <= inputImage_data_stream_1_V_empty_n;
        else 
            inputImage_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inputImage_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_252, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_252 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inputImage_data_stream_1_V_read <= ap_const_logic_1;
        else 
            inputImage_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    inputImage_data_stream_2_V_blk_n_assign_proc : process(inputImage_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_252)
    begin
        if (((icmp_ln25_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inputImage_data_stream_2_V_blk_n <= inputImage_data_stream_2_V_empty_n;
        else 
            inputImage_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inputImage_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_252, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_252 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inputImage_data_stream_2_V_read <= ap_const_logic_1;
        else 
            inputImage_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1148_fu_159_p1 <= mul_ln1148_fu_159_p10(24 - 1 downto 0);
    mul_ln1148_fu_159_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_148_p3),50));
    mul_ln1148_fu_159_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv50_1010102) * unsigned(mul_ln1148_fu_159_p1), 50));
    p_Val2_s_fu_241_p2 <= std_logic_vector(unsigned(zext_ln412_fu_237_p1) + unsigned(trunc_ln_fu_203_p4));
    r_1_fu_192_p2 <= "0" when (trunc_ln718_fu_188_p1 = ap_const_lv15_0) else "1";
    r_V_fu_182_p0 <= zext_ln1116_fu_178_p1(24 - 1 downto 0);
    r_V_fu_182_p1 <= zext_ln1116_fu_178_p1(24 - 1 downto 0);
    r_V_fu_182_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_182_p0) * unsigned(r_V_fu_182_p1), 48));
    r_fu_219_p2 <= (tmp_21_fu_212_p3 or r_1_reg_283);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_21_fu_212_p3 <= r_V_reg_276(16 downto 16);
    tmp_22_fu_224_p3 <= r_V_reg_276(15 downto 15);
    tmp_V_202_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_1_reg_271),32));
    trunc_ln718_fu_188_p1 <= r_V_fu_182_p2(15 - 1 downto 0);
    trunc_ln_fu_203_p4 <= r_V_reg_276(32 downto 16);
    zext_ln1116_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_1_fu_175_p1),48));
    zext_ln412_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_fu_231_p2),17));
end behav;
