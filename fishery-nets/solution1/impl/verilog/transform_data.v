// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transform_data (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inputImage_data_stream_0_V_dout,
        inputImage_data_stream_0_V_empty_n,
        inputImage_data_stream_0_V_read,
        inputImage_data_stream_1_V_dout,
        inputImage_data_stream_1_V_empty_n,
        inputImage_data_stream_1_V_read,
        inputImage_data_stream_2_V_dout,
        inputImage_data_stream_2_V_empty_n,
        inputImage_data_stream_2_V_read,
        I_V_V_din,
        I_V_V_full_n,
        I_V_V_write,
        I_COPY_V_V_din,
        I_COPY_V_V_full_n,
        I_COPY_V_V_write,
        I_2_V_V_din,
        I_2_V_V_full_n,
        I_2_V_V_write,
        ONES_V_V_din,
        ONES_V_V_full_n,
        ONES_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] inputImage_data_stream_0_V_dout;
input   inputImage_data_stream_0_V_empty_n;
output   inputImage_data_stream_0_V_read;
input  [7:0] inputImage_data_stream_1_V_dout;
input   inputImage_data_stream_1_V_empty_n;
output   inputImage_data_stream_1_V_read;
input  [7:0] inputImage_data_stream_2_V_dout;
input   inputImage_data_stream_2_V_empty_n;
output   inputImage_data_stream_2_V_read;
output  [31:0] I_V_V_din;
input   I_V_V_full_n;
output   I_V_V_write;
output  [31:0] I_COPY_V_V_din;
input   I_COPY_V_V_full_n;
output   I_COPY_V_V_write;
output  [31:0] I_2_V_V_din;
input   I_2_V_V_full_n;
output   I_2_V_V_write;
output  [31:0] ONES_V_V_din;
input   ONES_V_V_full_n;
output   ONES_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg inputImage_data_stream_0_V_read;
reg inputImage_data_stream_1_V_read;
reg inputImage_data_stream_2_V_read;
reg I_V_V_write;
reg I_COPY_V_V_write;
reg I_2_V_V_write;
reg ONES_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    inputImage_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_252;
reg    inputImage_data_stream_1_V_blk_n;
reg    inputImage_data_stream_2_V_blk_n;
reg    I_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln25_reg_252_pp0_iter3_reg;
reg    I_COPY_V_V_blk_n;
reg    I_2_V_V_blk_n;
reg    ONES_V_V_blk_n;
reg   [16:0] indvar_flatten_reg_125;
wire   [0:0] icmp_ln25_fu_136_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln25_reg_252_pp0_iter1_reg;
reg   [0:0] icmp_ln25_reg_252_pp0_iter2_reg;
wire   [16:0] add_ln25_fu_142_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_23_reg_261;
reg   [17:0] tmp_reg_266;
wire  signed [23:0] i_V_1_fu_175_p1;
reg  signed [23:0] i_V_1_reg_271;
wire   [47:0] r_V_fu_182_p2;
reg   [47:0] r_V_reg_276;
wire   [0:0] r_1_fu_192_p2;
reg   [0:0] r_1_reg_283;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] tmp_V_202_fu_198_p1;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] i_V_fu_148_p3;
wire   [23:0] mul_ln1148_fu_159_p1;
wire   [49:0] mul_ln1148_fu_159_p2;
wire   [23:0] r_V_fu_182_p0;
wire   [47:0] zext_ln1116_fu_178_p1;
wire   [23:0] r_V_fu_182_p1;
wire   [14:0] trunc_ln718_fu_188_p1;
wire   [0:0] tmp_21_fu_212_p3;
wire   [0:0] r_fu_219_p2;
wire   [0:0] tmp_22_fu_224_p3;
wire   [0:0] and_ln412_fu_231_p2;
wire   [16:0] zext_ln412_fu_237_p1;
wire   [16:0] trunc_ln_fu_203_p4;
wire   [16:0] p_Val2_s_fu_241_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [49:0] mul_ln1148_fu_159_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_125 <= add_ln25_fu_142_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_125 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_252_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_V_1_reg_271 <= i_V_1_fu_175_p1;
        r_1_reg_283 <= r_1_fu_192_p2;
        r_V_reg_276 <= r_V_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_252 <= icmp_ln25_fu_136_p2;
        icmp_ln25_reg_252_pp0_iter1_reg <= icmp_ln25_reg_252;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln25_reg_252_pp0_iter2_reg <= icmp_ln25_reg_252_pp0_iter1_reg;
        icmp_ln25_reg_252_pp0_iter3_reg <= icmp_ln25_reg_252_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_252 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_23_reg_261 <= inputImage_data_stream_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_252_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_266 <= {{mul_ln1148_fu_159_p2[49:32]}};
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        I_2_V_V_blk_n = I_2_V_V_full_n;
    end else begin
        I_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_2_V_V_write = 1'b1;
    end else begin
        I_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        I_COPY_V_V_blk_n = I_COPY_V_V_full_n;
    end else begin
        I_COPY_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_COPY_V_V_write = 1'b1;
    end else begin
        I_COPY_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        I_V_V_blk_n = I_V_V_full_n;
    end else begin
        I_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_V_V_write = 1'b1;
    end else begin
        I_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ONES_V_V_blk_n = ONES_V_V_full_n;
    end else begin
        ONES_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ONES_V_V_write = 1'b1;
    end else begin
        ONES_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_136_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputImage_data_stream_0_V_blk_n = inputImage_data_stream_0_V_empty_n;
    end else begin
        inputImage_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inputImage_data_stream_0_V_read = 1'b1;
    end else begin
        inputImage_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputImage_data_stream_1_V_blk_n = inputImage_data_stream_1_V_empty_n;
    end else begin
        inputImage_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inputImage_data_stream_1_V_read = 1'b1;
    end else begin
        inputImage_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputImage_data_stream_2_V_blk_n = inputImage_data_stream_2_V_empty_n;
    end else begin
        inputImage_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inputImage_data_stream_2_V_read = 1'b1;
    end else begin
        inputImage_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln25_fu_136_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln25_fu_136_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_2_V_V_din = p_Val2_s_fu_241_p2;

assign I_COPY_V_V_din = tmp_V_202_fu_198_p1;

assign I_V_V_din = tmp_V_202_fu_198_p1;

assign ONES_V_V_din = 32'd65536;

assign add_ln25_fu_142_p2 = (indvar_flatten_reg_125 + 17'd1);

assign and_ln412_fu_231_p2 = (tmp_22_fu_224_p3 & r_fu_219_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ONES_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_2_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_COPY_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_V_V_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_2_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_1_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ONES_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_2_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_COPY_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_V_V_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_2_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_1_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ONES_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_2_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_COPY_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_V_V_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_2_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_1_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_2_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_1_V_empty_n == 1'b0)) | ((icmp_ln25_reg_252 == 1'd0) & (inputImage_data_stream_0_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = (((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == ONES_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_2_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_COPY_V_V_full_n)) | ((icmp_ln25_reg_252_pp0_iter3_reg == 1'd0) & (1'b0 == I_V_V_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_V_1_fu_175_p1 = $signed(tmp_reg_266);

assign i_V_fu_148_p3 = {{tmp_23_reg_261}, {16'd0}};

assign icmp_ln25_fu_136_p2 = ((indvar_flatten_reg_125 == 17'd129600) ? 1'b1 : 1'b0);

assign mul_ln1148_fu_159_p1 = mul_ln1148_fu_159_p10;

assign mul_ln1148_fu_159_p10 = i_V_fu_148_p3;

assign mul_ln1148_fu_159_p2 = (50'd16843010 * mul_ln1148_fu_159_p1);

assign p_Val2_s_fu_241_p2 = (zext_ln412_fu_237_p1 + trunc_ln_fu_203_p4);

assign r_1_fu_192_p2 = ((trunc_ln718_fu_188_p1 != 15'd0) ? 1'b1 : 1'b0);

assign r_V_fu_182_p0 = zext_ln1116_fu_178_p1;

assign r_V_fu_182_p1 = zext_ln1116_fu_178_p1;

assign r_V_fu_182_p2 = (r_V_fu_182_p0 * r_V_fu_182_p1);

assign r_fu_219_p2 = (tmp_21_fu_212_p3 | r_1_reg_283);

assign start_out = real_start;

assign tmp_21_fu_212_p3 = r_V_reg_276[32'd16];

assign tmp_22_fu_224_p3 = r_V_reg_276[32'd15];

assign tmp_V_202_fu_198_p1 = $unsigned(i_V_1_reg_271);

assign trunc_ln718_fu_188_p1 = r_V_fu_182_p2[14:0];

assign trunc_ln_fu_203_p4 = {{r_V_reg_276[32:16]}};

assign zext_ln1116_fu_178_p1 = $unsigned(i_V_1_fu_175_p1);

assign zext_ln412_fu_237_p1 = and_ln412_fu_231_p2;

endmodule //transform_data
