// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module adaptive_threshold (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        IN_data_stream_V_dout,
        IN_data_stream_V_empty_n,
        IN_data_stream_V_read,
        IN1_data_stream_V_dout,
        IN1_data_stream_V_empty_n,
        IN1_data_stream_V_read,
        help_V_V_din,
        help_V_V_full_n,
        help_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] IN_data_stream_V_dout;
input   IN_data_stream_V_empty_n;
output   IN_data_stream_V_read;
input  [15:0] IN1_data_stream_V_dout;
input   IN1_data_stream_V_empty_n;
output   IN1_data_stream_V_read;
output  [31:0] help_V_V_din;
input   help_V_V_full_n;
output   help_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg IN_data_stream_V_read;
reg IN1_data_stream_V_read;
reg help_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    IN_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln887_reg_297;
reg    IN1_data_stream_V_blk_n;
reg    help_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln887_reg_297_pp0_iter3_reg;
reg   [16:0] indvar_flatten_reg_103;
wire   [0:0] icmp_ln887_fu_114_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln887_reg_297_pp0_iter1_reg;
reg   [0:0] icmp_ln887_reg_297_pp0_iter2_reg;
wire   [16:0] add_ln887_fu_120_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_63_reg_306;
reg   [15:0] tmp_64_reg_311;
reg   [0:0] tmp_reg_316;
reg   [0:0] tmp_reg_316_pp0_iter2_reg;
reg   [0:0] tmp_60_reg_322;
reg   [0:0] tmp_60_reg_322_pp0_iter2_reg;
wire   [64:0] mul_ln1148_fu_160_p2;
reg   [64:0] mul_ln1148_reg_328;
reg   [22:0] tmp_59_reg_333;
wire   [64:0] mul_fu_180_p2;
reg   [64:0] mul_reg_339;
wire   [28:0] pix2_V_fu_273_p2;
reg   [28:0] pix2_V_reg_345;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] pix1_V_fu_149_p3;
wire  signed [31:0] mul_ln1148_fu_160_p1;
wire   [31:0] pix_V_fu_142_p3;
wire  signed [31:0] mul_fu_180_p1;
wire   [64:0] sub_ln1148_fu_186_p2;
wire   [22:0] tmp_58_fu_191_p4;
wire   [22:0] select_ln1148_fu_201_p3;
wire   [22:0] sub_ln203_fu_207_p2;
wire   [64:0] neg_mul_fu_219_p2;
wire   [28:0] tmp_61_fu_224_p4;
wire   [28:0] tmp_62_fu_234_p4;
wire   [28:0] p_v10_v_fu_243_p3;
wire   [28:0] sub_ln703_fu_250_p2;
wire   [22:0] select_ln1148_1_fu_213_p3;
wire   [22:0] add_ln703_fu_263_p2;
wire   [28:0] empty_499_fu_256_p3;
wire  signed [28:0] sext_ln703_fu_269_p1;
wire   [0:0] icmp_ln1497_fu_279_p2;
wire   [16:0] pix2_V_2_fu_284_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_103 <= add_ln887_fu_120_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_103 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln887_reg_297 <= icmp_ln887_fu_114_p2;
        icmp_ln887_reg_297_pp0_iter1_reg <= icmp_ln887_reg_297;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln887_reg_297_pp0_iter2_reg <= icmp_ln887_reg_297_pp0_iter1_reg;
        icmp_ln887_reg_297_pp0_iter3_reg <= icmp_ln887_reg_297_pp0_iter2_reg;
        tmp_60_reg_322_pp0_iter2_reg <= tmp_60_reg_322;
        tmp_reg_316_pp0_iter2_reg <= tmp_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_297_pp0_iter1_reg == 1'd0))) begin
        mul_ln1148_reg_328[64 : 16] <= mul_ln1148_fu_160_p2[64 : 16];
        mul_reg_339[64 : 16] <= mul_fu_180_p2[64 : 16];
        tmp_59_reg_333 <= {{mul_ln1148_fu_160_p2[64:42]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_297_pp0_iter2_reg == 1'd0))) begin
        pix2_V_reg_345 <= pix2_V_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_297 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_60_reg_322 <= IN_data_stream_V_dout[32'd15];
        tmp_63_reg_306 <= IN_data_stream_V_dout;
        tmp_64_reg_311 <= IN1_data_stream_V_dout;
        tmp_reg_316 <= IN1_data_stream_V_dout[32'd15];
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN1_data_stream_V_blk_n = IN1_data_stream_V_empty_n;
    end else begin
        IN1_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN1_data_stream_V_read = 1'b1;
    end else begin
        IN1_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_data_stream_V_blk_n = IN_data_stream_V_empty_n;
    end else begin
        IN_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_data_stream_V_read = 1'b1;
    end else begin
        IN_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln887_fu_114_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_297_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        help_V_V_blk_n = help_V_V_full_n;
    end else begin
        help_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_297_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        help_V_V_write = 1'b1;
    end else begin
        help_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln887_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln887_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_fu_263_p2 = ($signed(23'd8309965) + $signed(select_ln1148_1_fu_213_p3));

assign add_ln887_fu_120_p2 = (indvar_flatten_reg_103 + 17'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln887_reg_297_pp0_iter3_reg == 1'd0) & (help_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN1_data_stream_V_empty_n)) | ((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN_data_stream_V_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln887_reg_297_pp0_iter3_reg == 1'd0) & (help_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN1_data_stream_V_empty_n)) | ((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN_data_stream_V_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln887_reg_297_pp0_iter3_reg == 1'd0) & (help_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN1_data_stream_V_empty_n)) | ((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN_data_stream_V_empty_n)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN1_data_stream_V_empty_n)) | ((icmp_ln887_reg_297 == 1'd0) & (1'b0 == IN_data_stream_V_empty_n)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln887_reg_297_pp0_iter3_reg == 1'd0) & (help_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign empty_499_fu_256_p3 = ((tmp_60_reg_322_pp0_iter2_reg[0:0] === 1'b1) ? tmp_61_fu_224_p4 : sub_ln703_fu_250_p2);

assign help_V_V_din = pix2_V_2_fu_284_p3;

assign icmp_ln1497_fu_279_p2 = (($signed(pix2_V_reg_345) < $signed(29'd1)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_114_p2 = ((indvar_flatten_reg_103 == 17'd129600) ? 1'b1 : 1'b0);

assign mul_fu_180_p1 = pix_V_fu_142_p3;

assign mul_fu_180_p2 = ($signed({{1'b0}, {65'd6871947674}}) * $signed(mul_fu_180_p1));

assign mul_ln1148_fu_160_p1 = pix1_V_fu_149_p3;

assign mul_ln1148_fu_160_p2 = ($signed({{1'b0}, {65'd4398046512}}) * $signed(mul_ln1148_fu_160_p1));

assign neg_mul_fu_219_p2 = (65'd0 - mul_reg_339);

assign p_v10_v_fu_243_p3 = ((tmp_60_reg_322_pp0_iter2_reg[0:0] === 1'b1) ? tmp_61_fu_224_p4 : tmp_62_fu_234_p4);

assign pix1_V_fu_149_p3 = {{tmp_64_reg_311}, {16'd0}};

assign pix2_V_2_fu_284_p3 = {{icmp_ln1497_fu_279_p2}, {16'd0}};

assign pix2_V_fu_273_p2 = ($signed(empty_499_fu_256_p3) + $signed(sext_ln703_fu_269_p1));

assign pix_V_fu_142_p3 = {{tmp_63_reg_306}, {16'd0}};

assign select_ln1148_1_fu_213_p3 = ((tmp_reg_316_pp0_iter2_reg[0:0] === 1'b1) ? sub_ln203_fu_207_p2 : tmp_59_reg_333);

assign select_ln1148_fu_201_p3 = ((tmp_reg_316_pp0_iter2_reg[0:0] === 1'b1) ? tmp_58_fu_191_p4 : tmp_59_reg_333);

assign sext_ln703_fu_269_p1 = $signed(add_ln703_fu_263_p2);

assign start_out = real_start;

assign sub_ln1148_fu_186_p2 = (65'd0 - mul_ln1148_reg_328);

assign sub_ln203_fu_207_p2 = (23'd0 - select_ln1148_fu_201_p3);

assign sub_ln703_fu_250_p2 = (29'd0 - p_v10_v_fu_243_p3);

assign tmp_58_fu_191_p4 = {{sub_ln1148_fu_186_p2[64:42]}};

assign tmp_61_fu_224_p4 = {{neg_mul_fu_219_p2[64:36]}};

assign tmp_62_fu_234_p4 = {{mul_reg_339[64:36]}};

always @ (posedge ap_clk) begin
    mul_ln1148_reg_328[15:0] <= 16'b0000000000000000;
    mul_reg_339[15:0] <= 16'b0000000000000000;
end

endmodule //adaptive_threshold
