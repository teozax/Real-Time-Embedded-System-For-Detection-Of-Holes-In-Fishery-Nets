// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mat2gray (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        M_data_stream_V_dout,
        M_data_stream_V_empty_n,
        M_data_stream_V_read,
        I_data_stream_V_din,
        I_data_stream_V_full_n,
        I_data_stream_V_write,
        min_value_dout,
        min_value_empty_n,
        min_value_read,
        max_value_dout,
        max_value_empty_n,
        max_value_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state58 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] M_data_stream_V_dout;
input   M_data_stream_V_empty_n;
output   M_data_stream_V_read;
output  [15:0] I_data_stream_V_din;
input   I_data_stream_V_full_n;
output   I_data_stream_V_write;
input  [15:0] min_value_dout;
input   min_value_empty_n;
output   min_value_read;
input  [15:0] max_value_dout;
input   max_value_empty_n;
output   max_value_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg M_data_stream_V_read;
reg I_data_stream_V_write;
reg min_value_read;
reg max_value_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    M_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln887_reg_305;
reg    I_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter55;
reg   [0:0] icmp_ln887_reg_305_pp0_iter54_reg;
reg    min_value_blk_n;
reg    max_value_blk_n;
reg   [16:0] indvar_flatten_reg_105;
wire  signed [31:0] max_V_fu_127_p3;
reg  signed [31:0] max_V_reg_285;
reg    ap_block_state1;
wire  signed [31:0] min_V_fu_135_p3;
reg  signed [31:0] min_V_reg_290;
wire  signed [32:0] rhs_V_fu_143_p1;
reg  signed [32:0] rhs_V_reg_295;
wire  signed [48:0] sext_ln1148_fu_157_p1;
reg  signed [48:0] sext_ln1148_reg_300;
wire   [0:0] icmp_ln887_fu_161_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
wire    ap_block_state44_pp0_stage0_iter42;
wire    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
wire    ap_block_state47_pp0_stage0_iter45;
wire    ap_block_state48_pp0_stage0_iter46;
wire    ap_block_state49_pp0_stage0_iter47;
wire    ap_block_state50_pp0_stage0_iter48;
wire    ap_block_state51_pp0_stage0_iter49;
wire    ap_block_state52_pp0_stage0_iter50;
wire    ap_block_state53_pp0_stage0_iter51;
wire    ap_block_state54_pp0_stage0_iter52;
wire    ap_block_state55_pp0_stage0_iter53;
wire    ap_block_state56_pp0_stage0_iter54;
reg    ap_block_state57_pp0_stage0_iter55;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln887_reg_305_pp0_iter1_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter2_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter3_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter4_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter5_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter6_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter7_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter8_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter9_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter10_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter11_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter12_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter13_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter14_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter15_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter16_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter17_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter18_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter19_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter20_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter21_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter22_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter23_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter24_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter25_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter26_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter27_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter28_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter29_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter30_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter31_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter32_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter33_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter34_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter35_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter36_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter37_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter38_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter39_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter40_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter41_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter42_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter43_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter44_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter45_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter46_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter47_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter48_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter49_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter50_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter51_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter52_reg;
reg   [0:0] icmp_ln887_reg_305_pp0_iter53_reg;
wire   [16:0] add_ln887_fu_167_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln87_fu_197_p2;
reg   [0:0] and_ln87_reg_314;
reg   [0:0] and_ln87_reg_314_pp0_iter2_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter3_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter4_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter5_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter6_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter7_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter8_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter9_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter10_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter11_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter12_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter13_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter14_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter15_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter16_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter17_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter18_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter19_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter20_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter21_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter22_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter23_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter24_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter25_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter26_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter27_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter28_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter29_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter30_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter31_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter32_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter33_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter34_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter35_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter36_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter37_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter38_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter39_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter40_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter41_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter42_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter43_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter44_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter45_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter46_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter47_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter48_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter49_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter50_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter51_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter52_reg;
reg   [0:0] and_ln87_reg_314_pp0_iter53_reg;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] sdiv_ln1148_reg_323;
wire   [31:0] mul_ln88_fu_228_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
wire   [31:0] ap_phi_reg_pp0_iter0_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter1_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter2_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter3_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter4_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter5_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter6_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter7_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter8_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter9_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter10_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter11_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter12_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter13_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter14_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter15_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter16_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter17_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter18_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter19_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter20_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter21_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter22_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter23_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter24_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter25_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter26_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter27_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter28_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter29_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter30_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter31_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter32_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter33_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter34_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter35_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter36_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter37_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter38_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter39_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter40_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter41_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter42_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter43_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter44_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter45_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter46_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter47_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter48_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter49_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter50_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter51_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter52_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter53_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter54_i_V_3_reg_116;
reg   [31:0] ap_phi_reg_pp0_iter55_i_V_3_reg_116;
reg    ap_block_pp0_stage0_01001;
wire  signed [32:0] lhs_V_1_fu_147_p1;
wire   [32:0] ret_V_6_fu_151_p2;
wire  signed [31:0] p_Val2_11_fu_173_p3;
wire   [0:0] icmp_ln87_fu_181_p2;
wire   [0:0] xor_ln87_fu_186_p2;
wire   [0:0] icmp_ln1495_fu_192_p2;
wire  signed [32:0] lhs_V_fu_203_p1;
wire   [32:0] ret_V_8_fu_207_p2;
wire   [48:0] grp_fu_220_p0;
wire  signed [32:0] grp_fu_220_p1;
wire  signed [31:0] i_V_fu_225_p1;
wire   [15:0] trunc_ln851_fu_252_p1;
wire   [15:0] ret_V_fu_234_p4;
wire   [0:0] icmp_ln851_fu_256_p2;
wire   [15:0] ret_V_7_fu_262_p2;
wire   [0:0] p_Result_s_fu_244_p3;
wire   [15:0] select_ln851_fu_268_p3;
reg    grp_fu_220_ce;
wire    ap_CS_fsm_state58;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_431;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
end

net_holes_detectidhF #(
    .ID( 1 ),
    .NUM_STAGE( 53 ),
    .din0_WIDTH( 49 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 32 ))
net_holes_detectidhF_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_220_p0),
    .din1(grp_fu_220_p1),
    .ce(grp_fu_220_ce),
    .dout(grp_fu_220_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state58)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end else if ((~((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter55 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_431)) begin
        if (((1'd0 == and_ln87_fu_197_p2) & (icmp_ln887_reg_305 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_i_V_3_reg_116 <= 32'd6553600;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_i_V_3_reg_116 <= ap_phi_reg_pp0_iter1_i_V_3_reg_116;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter54 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln887_reg_305_pp0_iter53_reg == 1'd0) & (1'd1 == and_ln87_reg_314_pp0_iter53_reg))) begin
            ap_phi_reg_pp0_iter55_i_V_3_reg_116 <= mul_ln88_fu_228_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter55_i_V_3_reg_116 <= ap_phi_reg_pp0_iter54_i_V_3_reg_116;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_105 <= add_ln887_fu_167_p2;
    end else if ((~((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_105 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_reg_305 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln87_reg_314 <= and_ln87_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln87_reg_314_pp0_iter10_reg <= and_ln87_reg_314_pp0_iter9_reg;
        and_ln87_reg_314_pp0_iter11_reg <= and_ln87_reg_314_pp0_iter10_reg;
        and_ln87_reg_314_pp0_iter12_reg <= and_ln87_reg_314_pp0_iter11_reg;
        and_ln87_reg_314_pp0_iter13_reg <= and_ln87_reg_314_pp0_iter12_reg;
        and_ln87_reg_314_pp0_iter14_reg <= and_ln87_reg_314_pp0_iter13_reg;
        and_ln87_reg_314_pp0_iter15_reg <= and_ln87_reg_314_pp0_iter14_reg;
        and_ln87_reg_314_pp0_iter16_reg <= and_ln87_reg_314_pp0_iter15_reg;
        and_ln87_reg_314_pp0_iter17_reg <= and_ln87_reg_314_pp0_iter16_reg;
        and_ln87_reg_314_pp0_iter18_reg <= and_ln87_reg_314_pp0_iter17_reg;
        and_ln87_reg_314_pp0_iter19_reg <= and_ln87_reg_314_pp0_iter18_reg;
        and_ln87_reg_314_pp0_iter20_reg <= and_ln87_reg_314_pp0_iter19_reg;
        and_ln87_reg_314_pp0_iter21_reg <= and_ln87_reg_314_pp0_iter20_reg;
        and_ln87_reg_314_pp0_iter22_reg <= and_ln87_reg_314_pp0_iter21_reg;
        and_ln87_reg_314_pp0_iter23_reg <= and_ln87_reg_314_pp0_iter22_reg;
        and_ln87_reg_314_pp0_iter24_reg <= and_ln87_reg_314_pp0_iter23_reg;
        and_ln87_reg_314_pp0_iter25_reg <= and_ln87_reg_314_pp0_iter24_reg;
        and_ln87_reg_314_pp0_iter26_reg <= and_ln87_reg_314_pp0_iter25_reg;
        and_ln87_reg_314_pp0_iter27_reg <= and_ln87_reg_314_pp0_iter26_reg;
        and_ln87_reg_314_pp0_iter28_reg <= and_ln87_reg_314_pp0_iter27_reg;
        and_ln87_reg_314_pp0_iter29_reg <= and_ln87_reg_314_pp0_iter28_reg;
        and_ln87_reg_314_pp0_iter2_reg <= and_ln87_reg_314;
        and_ln87_reg_314_pp0_iter30_reg <= and_ln87_reg_314_pp0_iter29_reg;
        and_ln87_reg_314_pp0_iter31_reg <= and_ln87_reg_314_pp0_iter30_reg;
        and_ln87_reg_314_pp0_iter32_reg <= and_ln87_reg_314_pp0_iter31_reg;
        and_ln87_reg_314_pp0_iter33_reg <= and_ln87_reg_314_pp0_iter32_reg;
        and_ln87_reg_314_pp0_iter34_reg <= and_ln87_reg_314_pp0_iter33_reg;
        and_ln87_reg_314_pp0_iter35_reg <= and_ln87_reg_314_pp0_iter34_reg;
        and_ln87_reg_314_pp0_iter36_reg <= and_ln87_reg_314_pp0_iter35_reg;
        and_ln87_reg_314_pp0_iter37_reg <= and_ln87_reg_314_pp0_iter36_reg;
        and_ln87_reg_314_pp0_iter38_reg <= and_ln87_reg_314_pp0_iter37_reg;
        and_ln87_reg_314_pp0_iter39_reg <= and_ln87_reg_314_pp0_iter38_reg;
        and_ln87_reg_314_pp0_iter3_reg <= and_ln87_reg_314_pp0_iter2_reg;
        and_ln87_reg_314_pp0_iter40_reg <= and_ln87_reg_314_pp0_iter39_reg;
        and_ln87_reg_314_pp0_iter41_reg <= and_ln87_reg_314_pp0_iter40_reg;
        and_ln87_reg_314_pp0_iter42_reg <= and_ln87_reg_314_pp0_iter41_reg;
        and_ln87_reg_314_pp0_iter43_reg <= and_ln87_reg_314_pp0_iter42_reg;
        and_ln87_reg_314_pp0_iter44_reg <= and_ln87_reg_314_pp0_iter43_reg;
        and_ln87_reg_314_pp0_iter45_reg <= and_ln87_reg_314_pp0_iter44_reg;
        and_ln87_reg_314_pp0_iter46_reg <= and_ln87_reg_314_pp0_iter45_reg;
        and_ln87_reg_314_pp0_iter47_reg <= and_ln87_reg_314_pp0_iter46_reg;
        and_ln87_reg_314_pp0_iter48_reg <= and_ln87_reg_314_pp0_iter47_reg;
        and_ln87_reg_314_pp0_iter49_reg <= and_ln87_reg_314_pp0_iter48_reg;
        and_ln87_reg_314_pp0_iter4_reg <= and_ln87_reg_314_pp0_iter3_reg;
        and_ln87_reg_314_pp0_iter50_reg <= and_ln87_reg_314_pp0_iter49_reg;
        and_ln87_reg_314_pp0_iter51_reg <= and_ln87_reg_314_pp0_iter50_reg;
        and_ln87_reg_314_pp0_iter52_reg <= and_ln87_reg_314_pp0_iter51_reg;
        and_ln87_reg_314_pp0_iter53_reg <= and_ln87_reg_314_pp0_iter52_reg;
        and_ln87_reg_314_pp0_iter5_reg <= and_ln87_reg_314_pp0_iter4_reg;
        and_ln87_reg_314_pp0_iter6_reg <= and_ln87_reg_314_pp0_iter5_reg;
        and_ln87_reg_314_pp0_iter7_reg <= and_ln87_reg_314_pp0_iter6_reg;
        and_ln87_reg_314_pp0_iter8_reg <= and_ln87_reg_314_pp0_iter7_reg;
        and_ln87_reg_314_pp0_iter9_reg <= and_ln87_reg_314_pp0_iter8_reg;
        icmp_ln887_reg_305_pp0_iter10_reg <= icmp_ln887_reg_305_pp0_iter9_reg;
        icmp_ln887_reg_305_pp0_iter11_reg <= icmp_ln887_reg_305_pp0_iter10_reg;
        icmp_ln887_reg_305_pp0_iter12_reg <= icmp_ln887_reg_305_pp0_iter11_reg;
        icmp_ln887_reg_305_pp0_iter13_reg <= icmp_ln887_reg_305_pp0_iter12_reg;
        icmp_ln887_reg_305_pp0_iter14_reg <= icmp_ln887_reg_305_pp0_iter13_reg;
        icmp_ln887_reg_305_pp0_iter15_reg <= icmp_ln887_reg_305_pp0_iter14_reg;
        icmp_ln887_reg_305_pp0_iter16_reg <= icmp_ln887_reg_305_pp0_iter15_reg;
        icmp_ln887_reg_305_pp0_iter17_reg <= icmp_ln887_reg_305_pp0_iter16_reg;
        icmp_ln887_reg_305_pp0_iter18_reg <= icmp_ln887_reg_305_pp0_iter17_reg;
        icmp_ln887_reg_305_pp0_iter19_reg <= icmp_ln887_reg_305_pp0_iter18_reg;
        icmp_ln887_reg_305_pp0_iter20_reg <= icmp_ln887_reg_305_pp0_iter19_reg;
        icmp_ln887_reg_305_pp0_iter21_reg <= icmp_ln887_reg_305_pp0_iter20_reg;
        icmp_ln887_reg_305_pp0_iter22_reg <= icmp_ln887_reg_305_pp0_iter21_reg;
        icmp_ln887_reg_305_pp0_iter23_reg <= icmp_ln887_reg_305_pp0_iter22_reg;
        icmp_ln887_reg_305_pp0_iter24_reg <= icmp_ln887_reg_305_pp0_iter23_reg;
        icmp_ln887_reg_305_pp0_iter25_reg <= icmp_ln887_reg_305_pp0_iter24_reg;
        icmp_ln887_reg_305_pp0_iter26_reg <= icmp_ln887_reg_305_pp0_iter25_reg;
        icmp_ln887_reg_305_pp0_iter27_reg <= icmp_ln887_reg_305_pp0_iter26_reg;
        icmp_ln887_reg_305_pp0_iter28_reg <= icmp_ln887_reg_305_pp0_iter27_reg;
        icmp_ln887_reg_305_pp0_iter29_reg <= icmp_ln887_reg_305_pp0_iter28_reg;
        icmp_ln887_reg_305_pp0_iter2_reg <= icmp_ln887_reg_305_pp0_iter1_reg;
        icmp_ln887_reg_305_pp0_iter30_reg <= icmp_ln887_reg_305_pp0_iter29_reg;
        icmp_ln887_reg_305_pp0_iter31_reg <= icmp_ln887_reg_305_pp0_iter30_reg;
        icmp_ln887_reg_305_pp0_iter32_reg <= icmp_ln887_reg_305_pp0_iter31_reg;
        icmp_ln887_reg_305_pp0_iter33_reg <= icmp_ln887_reg_305_pp0_iter32_reg;
        icmp_ln887_reg_305_pp0_iter34_reg <= icmp_ln887_reg_305_pp0_iter33_reg;
        icmp_ln887_reg_305_pp0_iter35_reg <= icmp_ln887_reg_305_pp0_iter34_reg;
        icmp_ln887_reg_305_pp0_iter36_reg <= icmp_ln887_reg_305_pp0_iter35_reg;
        icmp_ln887_reg_305_pp0_iter37_reg <= icmp_ln887_reg_305_pp0_iter36_reg;
        icmp_ln887_reg_305_pp0_iter38_reg <= icmp_ln887_reg_305_pp0_iter37_reg;
        icmp_ln887_reg_305_pp0_iter39_reg <= icmp_ln887_reg_305_pp0_iter38_reg;
        icmp_ln887_reg_305_pp0_iter3_reg <= icmp_ln887_reg_305_pp0_iter2_reg;
        icmp_ln887_reg_305_pp0_iter40_reg <= icmp_ln887_reg_305_pp0_iter39_reg;
        icmp_ln887_reg_305_pp0_iter41_reg <= icmp_ln887_reg_305_pp0_iter40_reg;
        icmp_ln887_reg_305_pp0_iter42_reg <= icmp_ln887_reg_305_pp0_iter41_reg;
        icmp_ln887_reg_305_pp0_iter43_reg <= icmp_ln887_reg_305_pp0_iter42_reg;
        icmp_ln887_reg_305_pp0_iter44_reg <= icmp_ln887_reg_305_pp0_iter43_reg;
        icmp_ln887_reg_305_pp0_iter45_reg <= icmp_ln887_reg_305_pp0_iter44_reg;
        icmp_ln887_reg_305_pp0_iter46_reg <= icmp_ln887_reg_305_pp0_iter45_reg;
        icmp_ln887_reg_305_pp0_iter47_reg <= icmp_ln887_reg_305_pp0_iter46_reg;
        icmp_ln887_reg_305_pp0_iter48_reg <= icmp_ln887_reg_305_pp0_iter47_reg;
        icmp_ln887_reg_305_pp0_iter49_reg <= icmp_ln887_reg_305_pp0_iter48_reg;
        icmp_ln887_reg_305_pp0_iter4_reg <= icmp_ln887_reg_305_pp0_iter3_reg;
        icmp_ln887_reg_305_pp0_iter50_reg <= icmp_ln887_reg_305_pp0_iter49_reg;
        icmp_ln887_reg_305_pp0_iter51_reg <= icmp_ln887_reg_305_pp0_iter50_reg;
        icmp_ln887_reg_305_pp0_iter52_reg <= icmp_ln887_reg_305_pp0_iter51_reg;
        icmp_ln887_reg_305_pp0_iter53_reg <= icmp_ln887_reg_305_pp0_iter52_reg;
        icmp_ln887_reg_305_pp0_iter54_reg <= icmp_ln887_reg_305_pp0_iter53_reg;
        icmp_ln887_reg_305_pp0_iter5_reg <= icmp_ln887_reg_305_pp0_iter4_reg;
        icmp_ln887_reg_305_pp0_iter6_reg <= icmp_ln887_reg_305_pp0_iter5_reg;
        icmp_ln887_reg_305_pp0_iter7_reg <= icmp_ln887_reg_305_pp0_iter6_reg;
        icmp_ln887_reg_305_pp0_iter8_reg <= icmp_ln887_reg_305_pp0_iter7_reg;
        icmp_ln887_reg_305_pp0_iter9_reg <= icmp_ln887_reg_305_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter10_i_V_3_reg_116 <= ap_phi_reg_pp0_iter9_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter11_i_V_3_reg_116 <= ap_phi_reg_pp0_iter10_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter12_i_V_3_reg_116 <= ap_phi_reg_pp0_iter11_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter13_i_V_3_reg_116 <= ap_phi_reg_pp0_iter12_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter14_i_V_3_reg_116 <= ap_phi_reg_pp0_iter13_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter15_i_V_3_reg_116 <= ap_phi_reg_pp0_iter14_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter16_i_V_3_reg_116 <= ap_phi_reg_pp0_iter15_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter17_i_V_3_reg_116 <= ap_phi_reg_pp0_iter16_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter18_i_V_3_reg_116 <= ap_phi_reg_pp0_iter17_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter19_i_V_3_reg_116 <= ap_phi_reg_pp0_iter18_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_i_V_3_reg_116 <= ap_phi_reg_pp0_iter0_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter20_i_V_3_reg_116 <= ap_phi_reg_pp0_iter19_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter21_i_V_3_reg_116 <= ap_phi_reg_pp0_iter20_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter22_i_V_3_reg_116 <= ap_phi_reg_pp0_iter21_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter23_i_V_3_reg_116 <= ap_phi_reg_pp0_iter22_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter24_i_V_3_reg_116 <= ap_phi_reg_pp0_iter23_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter25_i_V_3_reg_116 <= ap_phi_reg_pp0_iter24_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter26_i_V_3_reg_116 <= ap_phi_reg_pp0_iter25_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter27_i_V_3_reg_116 <= ap_phi_reg_pp0_iter26_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter28_i_V_3_reg_116 <= ap_phi_reg_pp0_iter27_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter28 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter29_i_V_3_reg_116 <= ap_phi_reg_pp0_iter28_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter29 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter30_i_V_3_reg_116 <= ap_phi_reg_pp0_iter29_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter30 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter31_i_V_3_reg_116 <= ap_phi_reg_pp0_iter30_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter31 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter32_i_V_3_reg_116 <= ap_phi_reg_pp0_iter31_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter32 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter33_i_V_3_reg_116 <= ap_phi_reg_pp0_iter32_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter33 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter34_i_V_3_reg_116 <= ap_phi_reg_pp0_iter33_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter35_i_V_3_reg_116 <= ap_phi_reg_pp0_iter34_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter35 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter36_i_V_3_reg_116 <= ap_phi_reg_pp0_iter35_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter36 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter37_i_V_3_reg_116 <= ap_phi_reg_pp0_iter36_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter37 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter38_i_V_3_reg_116 <= ap_phi_reg_pp0_iter37_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter38 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter39_i_V_3_reg_116 <= ap_phi_reg_pp0_iter38_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_i_V_3_reg_116 <= ap_phi_reg_pp0_iter2_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter39 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter40_i_V_3_reg_116 <= ap_phi_reg_pp0_iter39_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter40 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter41_i_V_3_reg_116 <= ap_phi_reg_pp0_iter40_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter41 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter42_i_V_3_reg_116 <= ap_phi_reg_pp0_iter41_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter42 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter43_i_V_3_reg_116 <= ap_phi_reg_pp0_iter42_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter43 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter44_i_V_3_reg_116 <= ap_phi_reg_pp0_iter43_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter44 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter45_i_V_3_reg_116 <= ap_phi_reg_pp0_iter44_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter45 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter46_i_V_3_reg_116 <= ap_phi_reg_pp0_iter45_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter46 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter47_i_V_3_reg_116 <= ap_phi_reg_pp0_iter46_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter47 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter48_i_V_3_reg_116 <= ap_phi_reg_pp0_iter47_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter48 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter49_i_V_3_reg_116 <= ap_phi_reg_pp0_iter48_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_i_V_3_reg_116 <= ap_phi_reg_pp0_iter3_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter49 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter50_i_V_3_reg_116 <= ap_phi_reg_pp0_iter49_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter50 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter51_i_V_3_reg_116 <= ap_phi_reg_pp0_iter50_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter51 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter52_i_V_3_reg_116 <= ap_phi_reg_pp0_iter51_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter52 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter53_i_V_3_reg_116 <= ap_phi_reg_pp0_iter52_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter53 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter54_i_V_3_reg_116 <= ap_phi_reg_pp0_iter53_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_i_V_3_reg_116 <= ap_phi_reg_pp0_iter4_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_i_V_3_reg_116 <= ap_phi_reg_pp0_iter5_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_i_V_3_reg_116 <= ap_phi_reg_pp0_iter6_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_i_V_3_reg_116 <= ap_phi_reg_pp0_iter7_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_i_V_3_reg_116 <= ap_phi_reg_pp0_iter8_i_V_3_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln887_reg_305 <= icmp_ln887_fu_161_p2;
        icmp_ln887_reg_305_pp0_iter1_reg <= icmp_ln887_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        max_V_reg_285[31 : 16] <= max_V_fu_127_p3[31 : 16];
        min_V_reg_290[31 : 16] <= min_V_fu_135_p3[31 : 16];
        rhs_V_reg_295[32 : 16] <= rhs_V_fu_143_p1[32 : 16];
        sext_ln1148_reg_300[48 : 16] <= sext_ln1148_fu_157_p1[48 : 16];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_reg_305_pp0_iter52_reg == 1'd0) & (1'd1 == and_ln87_reg_314_pp0_iter52_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sdiv_ln1148_reg_323 <= grp_fu_220_p2;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_305_pp0_iter54_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter55 == 1'b1))) begin
        I_data_stream_V_blk_n = I_data_stream_V_full_n;
    end else begin
        I_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_305_pp0_iter54_reg == 1'd0) & (ap_enable_reg_pp0_iter55 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        I_data_stream_V_write = 1'b1;
    end else begin
        I_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_data_stream_V_blk_n = M_data_stream_V_empty_n;
    end else begin
        M_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_305 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_data_stream_V_read = 1'b1;
    end else begin
        M_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln887_fu_161_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_220_ce = 1'b1;
    end else begin
        grp_fu_220_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        max_value_blk_n = max_value_empty_n;
    end else begin
        max_value_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        max_value_read = 1'b1;
    end else begin
        max_value_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        min_value_blk_n = min_value_empty_n;
    end else begin
        min_value_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        min_value_read = 1'b1;
    end else begin
        min_value_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln887_fu_161_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter54 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter55 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter54 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter55 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln887_fu_161_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_data_stream_V_din = ((p_Result_s_fu_244_p3[0:0] === 1'b1) ? select_ln851_fu_268_p3 : ret_V_fu_234_p4);

assign add_ln887_fu_167_p2 = (indvar_flatten_reg_105 + 17'd1);

assign and_ln87_fu_197_p2 = (xor_ln87_fu_186_p2 & icmp_ln1495_fu_192_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln887_reg_305_pp0_iter54_reg == 1'd0) & (1'b0 == I_data_stream_V_full_n) & (ap_enable_reg_pp0_iter55 == 1'b1)) | ((icmp_ln887_reg_305 == 1'd0) & (1'b0 == M_data_stream_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln887_reg_305_pp0_iter54_reg == 1'd0) & (1'b0 == I_data_stream_V_full_n) & (ap_enable_reg_pp0_iter55 == 1'b1)) | ((icmp_ln887_reg_305 == 1'd0) & (1'b0 == M_data_stream_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln887_reg_305_pp0_iter54_reg == 1'd0) & (1'b0 == I_data_stream_V_full_n) & (ap_enable_reg_pp0_iter55 == 1'b1)) | ((icmp_ln887_reg_305 == 1'd0) & (1'b0 == M_data_stream_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (max_value_empty_n == 1'b0) | (min_value_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln887_reg_305 == 1'd0) & (1'b0 == M_data_stream_V_empty_n));
end

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state57_pp0_stage0_iter55 = ((icmp_ln887_reg_305_pp0_iter54_reg == 1'd0) & (1'b0 == I_data_stream_V_full_n));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_431 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_i_V_3_reg_116 = 'bx;

assign ap_ready = internal_ap_ready;

assign grp_fu_220_p0 = {{ret_V_8_fu_207_p2}, {16'd0}};

assign grp_fu_220_p1 = sext_ln1148_reg_300;

assign i_V_fu_225_p1 = sdiv_ln1148_reg_323[31:0];

assign icmp_ln1495_fu_192_p2 = (($signed(p_Val2_11_fu_173_p3) < $signed(max_V_reg_285)) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_256_p2 = ((trunc_ln851_fu_252_p1 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_181_p2 = (($signed(p_Val2_11_fu_173_p3) < $signed(min_V_reg_290)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_161_p2 = ((indvar_flatten_reg_105 == 17'd129600) ? 1'b1 : 1'b0);

assign lhs_V_1_fu_147_p1 = max_V_fu_127_p3;

assign lhs_V_fu_203_p1 = p_Val2_11_fu_173_p3;

assign max_V_fu_127_p3 = {{max_value_dout}, {16'd0}};

assign min_V_fu_135_p3 = {{min_value_dout}, {16'd0}};

assign mul_ln88_fu_228_p2 = ($signed({{1'b0}, {32'd100}}) * $signed(i_V_fu_225_p1));

assign p_Result_s_fu_244_p3 = ap_phi_reg_pp0_iter55_i_V_3_reg_116[32'd31];

assign p_Val2_11_fu_173_p3 = {{M_data_stream_V_dout}, {16'd0}};

assign ret_V_6_fu_151_p2 = ($signed(lhs_V_1_fu_147_p1) - $signed(rhs_V_fu_143_p1));

assign ret_V_7_fu_262_p2 = (16'd1 + ret_V_fu_234_p4);

assign ret_V_8_fu_207_p2 = ($signed(lhs_V_fu_203_p1) - $signed(rhs_V_reg_295));

assign ret_V_fu_234_p4 = {{ap_phi_reg_pp0_iter55_i_V_3_reg_116[31:16]}};

assign rhs_V_fu_143_p1 = min_V_fu_135_p3;

assign select_ln851_fu_268_p3 = ((icmp_ln851_fu_256_p2[0:0] === 1'b1) ? ret_V_fu_234_p4 : ret_V_7_fu_262_p2);

assign sext_ln1148_fu_157_p1 = $signed(ret_V_6_fu_151_p2);

assign start_out = real_start;

assign trunc_ln851_fu_252_p1 = ap_phi_reg_pp0_iter55_i_V_3_reg_116[15:0];

assign xor_ln87_fu_186_p2 = (icmp_ln87_fu_181_p2 ^ 1'd1);

always @ (posedge ap_clk) begin
    max_V_reg_285[15:0] <= 16'b0000000000000000;
    min_V_reg_290[15:0] <= 16'b0000000000000000;
    rhs_V_reg_295[15:0] <= 16'b0000000000000000;
    sext_ln1148_reg_300[15:0] <= 16'b0000000000000000;
end

endmodule //mat2gray
