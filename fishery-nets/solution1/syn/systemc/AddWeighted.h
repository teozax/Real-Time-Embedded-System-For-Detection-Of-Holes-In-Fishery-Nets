// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddWeighted_HH_
#define _AddWeighted_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddWeighted : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<16> > src1_data_stream_V_dout;
    sc_in< sc_logic > src1_data_stream_V_empty_n;
    sc_out< sc_logic > src1_data_stream_V_read;
    sc_in< sc_lv<16> > src2_data_stream_V_dout;
    sc_in< sc_logic > src2_data_stream_V_empty_n;
    sc_out< sc_logic > src2_data_stream_V_read;
    sc_in< sc_lv<10> > dst_rows_V_dout;
    sc_in< sc_logic > dst_rows_V_empty_n;
    sc_out< sc_logic > dst_rows_V_read;
    sc_in< sc_lv<10> > dst_cols_V_dout;
    sc_in< sc_logic > dst_cols_V_empty_n;
    sc_out< sc_logic > dst_cols_V_read;
    sc_out< sc_lv<16> > dst_data_stream_V_din;
    sc_in< sc_logic > dst_data_stream_V_full_n;
    sc_out< sc_logic > dst_data_stream_V_write;
    sc_out< sc_lv<10> > dst_rows_V_out_din;
    sc_in< sc_logic > dst_rows_V_out_full_n;
    sc_out< sc_logic > dst_rows_V_out_write;
    sc_out< sc_lv<10> > dst_cols_V_out_din;
    sc_in< sc_logic > dst_cols_V_out_full_n;
    sc_out< sc_logic > dst_cols_V_out_write;


    // Module declarations
    AddWeighted(sc_module_name name);
    SC_HAS_PROCESS(AddWeighted);

    ~AddWeighted();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > src1_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln355_reg_268;
    sc_signal< sc_logic > src2_data_stream_V_blk_n;
    sc_signal< sc_logic > dst_rows_V_blk_n;
    sc_signal< sc_logic > dst_cols_V_blk_n;
    sc_signal< sc_logic > dst_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln355_reg_268_pp0_iter1_reg;
    sc_signal< sc_logic > dst_rows_V_out_blk_n;
    sc_signal< sc_logic > dst_cols_V_out_blk_n;
    sc_signal< sc_lv<32> > t_V_12_reg_138;
    sc_signal< sc_lv<32> > rows_V_fu_149_p1;
    sc_signal< sc_lv<32> > rows_V_reg_249;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > cols_V_fu_153_p1;
    sc_signal< sc_lv<32> > cols_V_reg_254;
    sc_signal< sc_lv<1> > icmp_ln354_fu_157_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_V_fu_162_p2;
    sc_signal< sc_lv<32> > i_V_reg_263;
    sc_signal< sc_lv<1> > icmp_ln355_fu_168_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > j_V_fu_173_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<16> > p_Val2_s_fu_241_p3;
    sc_signal< sc_lv<16> > p_Val2_s_reg_277;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<32> > t_V_reg_127;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<10> > rows_V_fu_149_p0;
    sc_signal< sc_lv<10> > cols_V_fu_153_p0;
    sc_signal< sc_lv<17> > zext_ln215_1_fu_183_p1;
    sc_signal< sc_lv<17> > zext_ln215_fu_179_p1;
    sc_signal< sc_lv<17> > sum_V_fu_187_p2;
    sc_signal< sc_lv<1> > p_Result_s_fu_193_p3;
    sc_signal< sc_lv<1> > tmp_84_fu_207_p3;
    sc_signal< sc_lv<1> > xor_ln785_fu_215_p2;
    sc_signal< sc_lv<1> > overflow_fu_221_p2;
    sc_signal< sc_lv<1> > or_ln340_fu_235_p2;
    sc_signal< sc_lv<16> > select_ln340_fu_227_p3;
    sc_signal< sc_lv<16> > p_Val2_82_fu_201_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<16> ap_const_lv16_FFFF;
    static const sc_lv<16> ap_const_lv16_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_cols_V_fu_153_p0();
    void thread_cols_V_fu_153_p1();
    void thread_dst_cols_V_blk_n();
    void thread_dst_cols_V_out_blk_n();
    void thread_dst_cols_V_out_din();
    void thread_dst_cols_V_out_write();
    void thread_dst_cols_V_read();
    void thread_dst_data_stream_V_blk_n();
    void thread_dst_data_stream_V_din();
    void thread_dst_data_stream_V_write();
    void thread_dst_rows_V_blk_n();
    void thread_dst_rows_V_out_blk_n();
    void thread_dst_rows_V_out_din();
    void thread_dst_rows_V_out_write();
    void thread_dst_rows_V_read();
    void thread_i_V_fu_162_p2();
    void thread_icmp_ln354_fu_157_p2();
    void thread_icmp_ln355_fu_168_p2();
    void thread_internal_ap_ready();
    void thread_j_V_fu_173_p2();
    void thread_or_ln340_fu_235_p2();
    void thread_overflow_fu_221_p2();
    void thread_p_Result_s_fu_193_p3();
    void thread_p_Val2_82_fu_201_p2();
    void thread_p_Val2_s_fu_241_p3();
    void thread_real_start();
    void thread_rows_V_fu_149_p0();
    void thread_rows_V_fu_149_p1();
    void thread_select_ln340_fu_227_p3();
    void thread_src1_data_stream_V_blk_n();
    void thread_src1_data_stream_V_read();
    void thread_src2_data_stream_V_blk_n();
    void thread_src2_data_stream_V_read();
    void thread_start_out();
    void thread_start_write();
    void thread_sum_V_fu_187_p2();
    void thread_tmp_84_fu_207_p3();
    void thread_xor_ln785_fu_215_p2();
    void thread_zext_ln215_1_fu_183_p1();
    void thread_zext_ln215_fu_179_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
