// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXIstream2Mat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXIstream2Mat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXIstream2Mat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> AXIstream2Mat::ap_ST_fsm_state1 = "1";
const sc_lv<3> AXIstream2Mat::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> AXIstream2Mat::ap_ST_fsm_state5 = "100";
const bool AXIstream2Mat::ap_const_boolean_1 = true;
const sc_lv<32> AXIstream2Mat::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AXIstream2Mat::ap_const_boolean_0 = false;
const sc_lv<1> AXIstream2Mat::ap_const_lv1_0 = "0";
const sc_lv<32> AXIstream2Mat::ap_const_lv32_1 = "1";
const sc_lv<1> AXIstream2Mat::ap_const_lv1_1 = "1";
const sc_lv<17> AXIstream2Mat::ap_const_lv17_0 = "00000000000000000";
const sc_lv<8> AXIstream2Mat::ap_const_lv8_0 = "00000000";
const sc_lv<17> AXIstream2Mat::ap_const_lv17_1FA40 = "11111101001000000";
const sc_lv<17> AXIstream2Mat::ap_const_lv17_1 = "1";
const sc_lv<32> AXIstream2Mat::ap_const_lv32_10000 = "10000000000000000";
const sc_lv<32> AXIstream2Mat::ap_const_lv32_FFFF0000 = "11111111111111110000000000000000";
const sc_lv<8> AXIstream2Mat::ap_const_lv8_FF = "11111111";
const sc_lv<32> AXIstream2Mat::ap_const_lv32_2 = "10";

AXIstream2Mat::AXIstream2Mat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_LI_V_V_blk_n);
    sensitive << ( LI_V_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_LI_V_V_read);
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_add_ln55_fu_113_p2);
    sensitive << ( indvar_flatten_reg_96 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( my_image_data_stream_0_V_full_n );
    sensitive << ( my_image_data_stream_1_V_full_n );
    sensitive << ( my_image_data_stream_2_V_full_n );
    sensitive << ( LI_V_V_empty_n );
    sensitive << ( help_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( my_image_data_stream_0_V_full_n );
    sensitive << ( my_image_data_stream_1_V_full_n );
    sensitive << ( my_image_data_stream_2_V_full_n );
    sensitive << ( LI_V_V_empty_n );
    sensitive << ( help_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( my_image_data_stream_0_V_full_n );
    sensitive << ( my_image_data_stream_1_V_full_n );
    sensitive << ( my_image_data_stream_2_V_full_n );
    sensitive << ( LI_V_V_empty_n );
    sensitive << ( help_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( LI_V_V_empty_n );
    sensitive << ( help_V_V_empty_n );
    sensitive << ( icmp_ln55_reg_147 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);
    sensitive << ( my_image_data_stream_0_V_full_n );
    sensitive << ( my_image_data_stream_1_V_full_n );
    sensitive << ( my_image_data_stream_2_V_full_n );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln55_fu_107_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_help_V_V_blk_n);
    sensitive << ( help_V_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_help_V_V_read);
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln1498_1_fu_125_p2);
    sensitive << ( LI_V_V_dout );
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln1498_fu_119_p2);
    sensitive << ( help_V_V_dout );
    sensitive << ( icmp_ln55_reg_147 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln55_fu_107_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_96 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_my_image_data_stream_0_V_blk_n);
    sensitive << ( my_image_data_stream_0_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );

    SC_METHOD(thread_my_image_data_stream_0_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( icmp_ln1498_reg_156 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_my_image_data_stream_0_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_my_image_data_stream_1_V_blk_n);
    sensitive << ( my_image_data_stream_1_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );

    SC_METHOD(thread_my_image_data_stream_1_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_my_image_data_stream_1_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_my_image_data_stream_2_V_blk_n);
    sensitive << ( my_image_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );

    SC_METHOD(thread_my_image_data_stream_2_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( icmp_ln1498_1_reg_161 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_my_image_data_stream_2_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln55_reg_147_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln55_fu_107_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXIstream2Mat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, my_image_data_stream_0_V_din, "(port)my_image_data_stream_0_V_din");
    sc_trace(mVcdFile, my_image_data_stream_0_V_full_n, "(port)my_image_data_stream_0_V_full_n");
    sc_trace(mVcdFile, my_image_data_stream_0_V_write, "(port)my_image_data_stream_0_V_write");
    sc_trace(mVcdFile, my_image_data_stream_1_V_din, "(port)my_image_data_stream_1_V_din");
    sc_trace(mVcdFile, my_image_data_stream_1_V_full_n, "(port)my_image_data_stream_1_V_full_n");
    sc_trace(mVcdFile, my_image_data_stream_1_V_write, "(port)my_image_data_stream_1_V_write");
    sc_trace(mVcdFile, my_image_data_stream_2_V_din, "(port)my_image_data_stream_2_V_din");
    sc_trace(mVcdFile, my_image_data_stream_2_V_full_n, "(port)my_image_data_stream_2_V_full_n");
    sc_trace(mVcdFile, my_image_data_stream_2_V_write, "(port)my_image_data_stream_2_V_write");
    sc_trace(mVcdFile, LI_V_V_dout, "(port)LI_V_V_dout");
    sc_trace(mVcdFile, LI_V_V_empty_n, "(port)LI_V_V_empty_n");
    sc_trace(mVcdFile, LI_V_V_read, "(port)LI_V_V_read");
    sc_trace(mVcdFile, help_V_V_dout, "(port)help_V_V_dout");
    sc_trace(mVcdFile, help_V_V_empty_n, "(port)help_V_V_empty_n");
    sc_trace(mVcdFile, help_V_V_read, "(port)help_V_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, my_image_data_stream_0_V_blk_n, "my_image_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln55_reg_147, "icmp_ln55_reg_147");
    sc_trace(mVcdFile, icmp_ln55_reg_147_pp0_iter1_reg, "icmp_ln55_reg_147_pp0_iter1_reg");
    sc_trace(mVcdFile, my_image_data_stream_1_V_blk_n, "my_image_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, my_image_data_stream_2_V_blk_n, "my_image_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, LI_V_V_blk_n, "LI_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, help_V_V_blk_n, "help_V_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_96, "indvar_flatten_reg_96");
    sc_trace(mVcdFile, icmp_ln55_fu_107_p2, "icmp_ln55_fu_107_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln55_fu_113_p2, "add_ln55_fu_113_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, icmp_ln1498_fu_119_p2, "icmp_ln1498_fu_119_p2");
    sc_trace(mVcdFile, icmp_ln1498_reg_156, "icmp_ln1498_reg_156");
    sc_trace(mVcdFile, icmp_ln1498_1_fu_125_p2, "icmp_ln1498_1_fu_125_p2");
    sc_trace(mVcdFile, icmp_ln1498_1_reg_161, "icmp_ln1498_1_reg_161");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

AXIstream2Mat::~AXIstream2Mat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AXIstream2Mat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln55_fu_107_p2.read()))) {
        indvar_flatten_reg_96 = add_ln55_fu_113_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_96 = ap_const_lv17_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln1498_1_reg_161 = icmp_ln1498_1_fu_125_p2.read();
        icmp_ln1498_reg_156 = icmp_ln1498_fu_119_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln55_reg_147 = icmp_ln55_fu_107_p2.read();
        icmp_ln55_reg_147_pp0_iter1_reg = icmp_ln55_reg_147.read();
    }
}

void AXIstream2Mat::thread_LI_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0))) {
        LI_V_V_blk_n = LI_V_V_empty_n.read();
    } else {
        LI_V_V_blk_n = ap_const_logic_1;
    }
}

void AXIstream2Mat::thread_LI_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        LI_V_V_read = ap_const_logic_1;
    } else {
        LI_V_V_read = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_add_ln55_fu_113_p2() {
    add_ln55_fu_113_p2 = (!indvar_flatten_reg_96.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(indvar_flatten_reg_96.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void AXIstream2Mat::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void AXIstream2Mat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXIstream2Mat::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void AXIstream2Mat::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXIstream2Mat::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, LI_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_0_V_full_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_1_V_full_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_2_V_full_n.read())))));
}

void AXIstream2Mat::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, LI_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_0_V_full_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_1_V_full_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_2_V_full_n.read())))));
}

void AXIstream2Mat::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, LI_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_0_V_full_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_1_V_full_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_2_V_full_n.read())))));
}

void AXIstream2Mat::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void AXIstream2Mat::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXIstream2Mat::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, LI_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_empty_n.read())));
}

void AXIstream2Mat::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = ((esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_0_V_full_n.read())) || (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_1_V_full_n.read())) || (esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_image_data_stream_2_V_full_n.read())));
}

void AXIstream2Mat::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln55_fu_107_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXIstream2Mat::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AXIstream2Mat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void AXIstream2Mat::thread_help_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0))) {
        help_V_V_blk_n = help_V_V_empty_n.read();
    } else {
        help_V_V_blk_n = ap_const_logic_1;
    }
}

void AXIstream2Mat::thread_help_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        help_V_V_read = ap_const_logic_1;
    } else {
        help_V_V_read = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_icmp_ln1498_1_fu_125_p2() {
    icmp_ln1498_1_fu_125_p2 = (!LI_V_V_dout.read().is_01() || !ap_const_lv32_FFFF0000.is_01())? sc_lv<1>(): sc_lv<1>(LI_V_V_dout.read() == ap_const_lv32_FFFF0000);
}

void AXIstream2Mat::thread_icmp_ln1498_fu_119_p2() {
    icmp_ln1498_fu_119_p2 = (!help_V_V_dout.read().is_01() || !ap_const_lv32_10000.is_01())? sc_lv<1>(): sc_lv<1>(help_V_V_dout.read() == ap_const_lv32_10000);
}

void AXIstream2Mat::thread_icmp_ln55_fu_107_p2() {
    icmp_ln55_fu_107_p2 = (!indvar_flatten_reg_96.read().is_01() || !ap_const_lv17_1FA40.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_96.read() == ap_const_lv17_1FA40);
}

void AXIstream2Mat::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_my_image_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        my_image_data_stream_0_V_blk_n = my_image_data_stream_0_V_full_n.read();
    } else {
        my_image_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void AXIstream2Mat::thread_my_image_data_stream_0_V_din() {
    my_image_data_stream_0_V_din = (!icmp_ln1498_reg_156.read()[0].is_01())? sc_lv<8>(): ((icmp_ln1498_reg_156.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void AXIstream2Mat::thread_my_image_data_stream_0_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        my_image_data_stream_0_V_write = ap_const_logic_1;
    } else {
        my_image_data_stream_0_V_write = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_my_image_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        my_image_data_stream_1_V_blk_n = my_image_data_stream_1_V_full_n.read();
    } else {
        my_image_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void AXIstream2Mat::thread_my_image_data_stream_1_V_din() {
    my_image_data_stream_1_V_din = ap_const_lv8_0;
}

void AXIstream2Mat::thread_my_image_data_stream_1_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        my_image_data_stream_1_V_write = ap_const_logic_1;
    } else {
        my_image_data_stream_1_V_write = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_my_image_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        my_image_data_stream_2_V_blk_n = my_image_data_stream_2_V_full_n.read();
    } else {
        my_image_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void AXIstream2Mat::thread_my_image_data_stream_2_V_din() {
    my_image_data_stream_2_V_din = (!icmp_ln1498_1_reg_161.read()[0].is_01())? sc_lv<8>(): ((icmp_ln1498_1_reg_161.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void AXIstream2Mat::thread_my_image_data_stream_2_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_147_pp0_iter1_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        my_image_data_stream_2_V_write = ap_const_logic_1;
    } else {
        my_image_data_stream_2_V_write = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void AXIstream2Mat::thread_start_out() {
    start_out = real_start.read();
}

void AXIstream2Mat::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void AXIstream2Mat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln55_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln55_fu_107_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

