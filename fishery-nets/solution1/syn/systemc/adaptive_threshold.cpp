// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "adaptive_threshold.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic adaptive_threshold::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic adaptive_threshold::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> adaptive_threshold::ap_ST_fsm_state1 = "1";
const sc_lv<3> adaptive_threshold::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> adaptive_threshold::ap_ST_fsm_state7 = "100";
const bool adaptive_threshold::ap_const_boolean_1 = true;
const sc_lv<32> adaptive_threshold::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> adaptive_threshold::ap_const_lv32_1 = "1";
const bool adaptive_threshold::ap_const_boolean_0 = false;
const sc_lv<1> adaptive_threshold::ap_const_lv1_0 = "0";
const sc_lv<1> adaptive_threshold::ap_const_lv1_1 = "1";
const sc_lv<17> adaptive_threshold::ap_const_lv17_0 = "00000000000000000";
const sc_lv<17> adaptive_threshold::ap_const_lv17_1FA40 = "11111101001000000";
const sc_lv<17> adaptive_threshold::ap_const_lv17_1 = "1";
const sc_lv<32> adaptive_threshold::ap_const_lv32_F = "1111";
const sc_lv<16> adaptive_threshold::ap_const_lv16_0 = "0000000000000000";
const sc_lv<65> adaptive_threshold::ap_const_lv65_10624DD30 = "100000110001001001101110100110000";
const sc_lv<32> adaptive_threshold::ap_const_lv32_2A = "101010";
const sc_lv<32> adaptive_threshold::ap_const_lv32_40 = "1000000";
const sc_lv<65> adaptive_threshold::ap_const_lv65_19999999A = "110011001100110011001100110011010";
const sc_lv<65> adaptive_threshold::ap_const_lv65_0 = "00000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<23> adaptive_threshold::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> adaptive_threshold::ap_const_lv32_24 = "100100";
const sc_lv<29> adaptive_threshold::ap_const_lv29_0 = "00000000000000000000000000000";
const sc_lv<23> adaptive_threshold::ap_const_lv23_7ECCCD = "11111101100110011001101";
const sc_lv<29> adaptive_threshold::ap_const_lv29_1 = "1";
const sc_lv<32> adaptive_threshold::ap_const_lv32_2 = "10";

adaptive_threshold::adaptive_threshold(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_IN1_data_stream_V_blk_n);
    sensitive << ( IN1_data_stream_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln887_reg_297 );

    SC_METHOD(thread_IN1_data_stream_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln887_reg_297 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_IN_data_stream_V_blk_n);
    sensitive << ( IN_data_stream_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln887_reg_297 );

    SC_METHOD(thread_IN_data_stream_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln887_reg_297 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_add_ln703_fu_263_p2);
    sensitive << ( select_ln1148_1_fu_213_p3 );

    SC_METHOD(thread_add_ln887_fu_120_p2);
    sensitive << ( indvar_flatten_reg_103 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( IN_data_stream_V_empty_n );
    sensitive << ( IN1_data_stream_V_empty_n );
    sensitive << ( help_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln887_reg_297 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( IN_data_stream_V_empty_n );
    sensitive << ( IN1_data_stream_V_empty_n );
    sensitive << ( help_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln887_reg_297 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( IN_data_stream_V_empty_n );
    sensitive << ( IN1_data_stream_V_empty_n );
    sensitive << ( help_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln887_reg_297 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( IN_data_stream_V_empty_n );
    sensitive << ( IN1_data_stream_V_empty_n );
    sensitive << ( icmp_ln887_reg_297 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);
    sensitive << ( help_V_V_full_n );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln887_fu_114_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_empty_499_fu_256_p3);
    sensitive << ( tmp_60_reg_322_pp0_iter2_reg );
    sensitive << ( tmp_61_fu_224_p4 );
    sensitive << ( sub_ln703_fu_250_p2 );

    SC_METHOD(thread_help_V_V_blk_n);
    sensitive << ( help_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );

    SC_METHOD(thread_help_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( pix2_V_2_fu_284_p3 );

    SC_METHOD(thread_help_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln1497_fu_279_p2);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_reg_297_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( pix2_V_reg_345 );

    SC_METHOD(thread_icmp_ln887_fu_114_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_103 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mul_fu_180_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( pix_V_fu_142_p3 );

    SC_METHOD(thread_mul_fu_180_p2);
    sensitive << ( mul_fu_180_p1 );

    SC_METHOD(thread_mul_ln1148_fu_160_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( pix1_V_fu_149_p3 );

    SC_METHOD(thread_mul_ln1148_fu_160_p2);
    sensitive << ( mul_ln1148_fu_160_p1 );

    SC_METHOD(thread_neg_mul_fu_219_p2);
    sensitive << ( mul_reg_339 );

    SC_METHOD(thread_p_v10_v_fu_243_p3);
    sensitive << ( tmp_60_reg_322_pp0_iter2_reg );
    sensitive << ( tmp_61_fu_224_p4 );
    sensitive << ( tmp_62_fu_234_p4 );

    SC_METHOD(thread_pix1_V_fu_149_p3);
    sensitive << ( tmp_64_reg_311 );

    SC_METHOD(thread_pix2_V_2_fu_284_p3);
    sensitive << ( icmp_ln1497_fu_279_p2 );

    SC_METHOD(thread_pix2_V_fu_273_p2);
    sensitive << ( empty_499_fu_256_p3 );
    sensitive << ( sext_ln703_fu_269_p1 );

    SC_METHOD(thread_pix_V_fu_142_p3);
    sensitive << ( tmp_63_reg_306 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_select_ln1148_1_fu_213_p3);
    sensitive << ( tmp_reg_316_pp0_iter2_reg );
    sensitive << ( tmp_59_reg_333 );
    sensitive << ( sub_ln203_fu_207_p2 );

    SC_METHOD(thread_select_ln1148_fu_201_p3);
    sensitive << ( tmp_reg_316_pp0_iter2_reg );
    sensitive << ( tmp_59_reg_333 );
    sensitive << ( tmp_58_fu_191_p4 );

    SC_METHOD(thread_sext_ln703_fu_269_p1);
    sensitive << ( add_ln703_fu_263_p2 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_sub_ln1148_fu_186_p2);
    sensitive << ( mul_ln1148_reg_328 );

    SC_METHOD(thread_sub_ln203_fu_207_p2);
    sensitive << ( select_ln1148_fu_201_p3 );

    SC_METHOD(thread_sub_ln703_fu_250_p2);
    sensitive << ( p_v10_v_fu_243_p3 );

    SC_METHOD(thread_tmp_58_fu_191_p4);
    sensitive << ( sub_ln1148_fu_186_p2 );

    SC_METHOD(thread_tmp_61_fu_224_p4);
    sensitive << ( neg_mul_fu_219_p2 );

    SC_METHOD(thread_tmp_62_fu_234_p4);
    sensitive << ( mul_reg_339 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln887_fu_114_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "adaptive_threshold_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, IN_data_stream_V_dout, "(port)IN_data_stream_V_dout");
    sc_trace(mVcdFile, IN_data_stream_V_empty_n, "(port)IN_data_stream_V_empty_n");
    sc_trace(mVcdFile, IN_data_stream_V_read, "(port)IN_data_stream_V_read");
    sc_trace(mVcdFile, IN1_data_stream_V_dout, "(port)IN1_data_stream_V_dout");
    sc_trace(mVcdFile, IN1_data_stream_V_empty_n, "(port)IN1_data_stream_V_empty_n");
    sc_trace(mVcdFile, IN1_data_stream_V_read, "(port)IN1_data_stream_V_read");
    sc_trace(mVcdFile, help_V_V_din, "(port)help_V_V_din");
    sc_trace(mVcdFile, help_V_V_full_n, "(port)help_V_V_full_n");
    sc_trace(mVcdFile, help_V_V_write, "(port)help_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, IN_data_stream_V_blk_n, "IN_data_stream_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln887_reg_297, "icmp_ln887_reg_297");
    sc_trace(mVcdFile, IN1_data_stream_V_blk_n, "IN1_data_stream_V_blk_n");
    sc_trace(mVcdFile, help_V_V_blk_n, "help_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, icmp_ln887_reg_297_pp0_iter3_reg, "icmp_ln887_reg_297_pp0_iter3_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_103, "indvar_flatten_reg_103");
    sc_trace(mVcdFile, icmp_ln887_fu_114_p2, "icmp_ln887_fu_114_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln887_reg_297_pp0_iter1_reg, "icmp_ln887_reg_297_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln887_reg_297_pp0_iter2_reg, "icmp_ln887_reg_297_pp0_iter2_reg");
    sc_trace(mVcdFile, add_ln887_fu_120_p2, "add_ln887_fu_120_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_63_reg_306, "tmp_63_reg_306");
    sc_trace(mVcdFile, tmp_64_reg_311, "tmp_64_reg_311");
    sc_trace(mVcdFile, tmp_reg_316, "tmp_reg_316");
    sc_trace(mVcdFile, tmp_reg_316_pp0_iter2_reg, "tmp_reg_316_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_60_reg_322, "tmp_60_reg_322");
    sc_trace(mVcdFile, tmp_60_reg_322_pp0_iter2_reg, "tmp_60_reg_322_pp0_iter2_reg");
    sc_trace(mVcdFile, mul_ln1148_fu_160_p2, "mul_ln1148_fu_160_p2");
    sc_trace(mVcdFile, mul_ln1148_reg_328, "mul_ln1148_reg_328");
    sc_trace(mVcdFile, tmp_59_reg_333, "tmp_59_reg_333");
    sc_trace(mVcdFile, mul_fu_180_p2, "mul_fu_180_p2");
    sc_trace(mVcdFile, mul_reg_339, "mul_reg_339");
    sc_trace(mVcdFile, pix2_V_fu_273_p2, "pix2_V_fu_273_p2");
    sc_trace(mVcdFile, pix2_V_reg_345, "pix2_V_reg_345");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, pix1_V_fu_149_p3, "pix1_V_fu_149_p3");
    sc_trace(mVcdFile, mul_ln1148_fu_160_p1, "mul_ln1148_fu_160_p1");
    sc_trace(mVcdFile, pix_V_fu_142_p3, "pix_V_fu_142_p3");
    sc_trace(mVcdFile, mul_fu_180_p1, "mul_fu_180_p1");
    sc_trace(mVcdFile, sub_ln1148_fu_186_p2, "sub_ln1148_fu_186_p2");
    sc_trace(mVcdFile, tmp_58_fu_191_p4, "tmp_58_fu_191_p4");
    sc_trace(mVcdFile, select_ln1148_fu_201_p3, "select_ln1148_fu_201_p3");
    sc_trace(mVcdFile, sub_ln203_fu_207_p2, "sub_ln203_fu_207_p2");
    sc_trace(mVcdFile, neg_mul_fu_219_p2, "neg_mul_fu_219_p2");
    sc_trace(mVcdFile, tmp_61_fu_224_p4, "tmp_61_fu_224_p4");
    sc_trace(mVcdFile, tmp_62_fu_234_p4, "tmp_62_fu_234_p4");
    sc_trace(mVcdFile, p_v10_v_fu_243_p3, "p_v10_v_fu_243_p3");
    sc_trace(mVcdFile, sub_ln703_fu_250_p2, "sub_ln703_fu_250_p2");
    sc_trace(mVcdFile, select_ln1148_1_fu_213_p3, "select_ln1148_1_fu_213_p3");
    sc_trace(mVcdFile, add_ln703_fu_263_p2, "add_ln703_fu_263_p2");
    sc_trace(mVcdFile, empty_499_fu_256_p3, "empty_499_fu_256_p3");
    sc_trace(mVcdFile, sext_ln703_fu_269_p1, "sext_ln703_fu_269_p1");
    sc_trace(mVcdFile, icmp_ln1497_fu_279_p2, "icmp_ln1497_fu_279_p2");
    sc_trace(mVcdFile, pix2_V_2_fu_284_p3, "pix2_V_2_fu_284_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

adaptive_threshold::~adaptive_threshold() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void adaptive_threshold::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter4 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_114_p2.read()))) {
        indvar_flatten_reg_103 = add_ln887_fu_120_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_103 = ap_const_lv17_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln887_reg_297 = icmp_ln887_fu_114_p2.read();
        icmp_ln887_reg_297_pp0_iter1_reg = icmp_ln887_reg_297.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln887_reg_297_pp0_iter2_reg = icmp_ln887_reg_297_pp0_iter1_reg.read();
        icmp_ln887_reg_297_pp0_iter3_reg = icmp_ln887_reg_297_pp0_iter2_reg.read();
        tmp_60_reg_322_pp0_iter2_reg = tmp_60_reg_322.read();
        tmp_reg_316_pp0_iter2_reg = tmp_reg_316.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter1_reg.read()))) {
        mul_ln1148_reg_328 = mul_ln1148_fu_160_p2.read();
        mul_reg_339 = mul_fu_180_p2.read();
        tmp_59_reg_333 = mul_ln1148_fu_160_p2.read().range(64, 42);
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter2_reg.read()))) {
        pix2_V_reg_345 = pix2_V_fu_273_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_60_reg_322 = IN_data_stream_V_dout.read().range(15, 15);
        tmp_63_reg_306 = IN_data_stream_V_dout.read();
        tmp_64_reg_311 = IN1_data_stream_V_dout.read();
        tmp_reg_316 = IN1_data_stream_V_dout.read().range(15, 15);
    }
}

void adaptive_threshold::thread_IN1_data_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0))) {
        IN1_data_stream_V_blk_n = IN1_data_stream_V_empty_n.read();
    } else {
        IN1_data_stream_V_blk_n = ap_const_logic_1;
    }
}

void adaptive_threshold::thread_IN1_data_stream_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        IN1_data_stream_V_read = ap_const_logic_1;
    } else {
        IN1_data_stream_V_read = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_IN_data_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0))) {
        IN_data_stream_V_blk_n = IN_data_stream_V_empty_n.read();
    } else {
        IN_data_stream_V_blk_n = ap_const_logic_1;
    }
}

void adaptive_threshold::thread_IN_data_stream_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        IN_data_stream_V_read = ap_const_logic_1;
    } else {
        IN_data_stream_V_read = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_add_ln703_fu_263_p2() {
    add_ln703_fu_263_p2 = (!ap_const_lv23_7ECCCD.is_01() || !select_ln1148_1_fu_213_p3.read().is_01())? sc_lv<23>(): (sc_bigint<23>(ap_const_lv23_7ECCCD) + sc_biguint<23>(select_ln1148_1_fu_213_p3.read()));
}

void adaptive_threshold::thread_add_ln887_fu_120_p2() {
    add_ln887_fu_120_p2 = (!indvar_flatten_reg_103.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(indvar_flatten_reg_103.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void adaptive_threshold::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void adaptive_threshold::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void adaptive_threshold::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[2];
}

void adaptive_threshold::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adaptive_threshold::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, IN_data_stream_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, IN1_data_stream_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_full_n.read())));
}

void adaptive_threshold::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, IN_data_stream_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, IN1_data_stream_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_full_n.read())));
}

void adaptive_threshold::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, IN_data_stream_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, IN1_data_stream_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_full_n.read())));
}

void adaptive_threshold::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void adaptive_threshold::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adaptive_threshold::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, IN_data_stream_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln887_reg_297.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, IN1_data_stream_V_empty_n.read())));
}

void adaptive_threshold::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adaptive_threshold::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adaptive_threshold::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, help_V_V_full_n.read()));
}

void adaptive_threshold::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln887_fu_114_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void adaptive_threshold::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void adaptive_threshold::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void adaptive_threshold::thread_empty_499_fu_256_p3() {
    empty_499_fu_256_p3 = (!tmp_60_reg_322_pp0_iter2_reg.read()[0].is_01())? sc_lv<29>(): ((tmp_60_reg_322_pp0_iter2_reg.read()[0].to_bool())? tmp_61_fu_224_p4.read(): sub_ln703_fu_250_p2.read());
}

void adaptive_threshold::thread_help_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter3_reg.read()))) {
        help_V_V_blk_n = help_V_V_full_n.read();
    } else {
        help_V_V_blk_n = ap_const_logic_1;
    }
}

void adaptive_threshold::thread_help_V_V_din() {
    help_V_V_din = esl_zext<32,17>(pix2_V_2_fu_284_p3.read());
}

void adaptive_threshold::thread_help_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_reg_297_pp0_iter3_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        help_V_V_write = ap_const_logic_1;
    } else {
        help_V_V_write = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_icmp_ln1497_fu_279_p2() {
    icmp_ln1497_fu_279_p2 = (!pix2_V_reg_345.read().is_01() || !ap_const_lv29_1.is_01())? sc_lv<1>(): (sc_bigint<29>(pix2_V_reg_345.read()) < sc_bigint<29>(ap_const_lv29_1));
}

void adaptive_threshold::thread_icmp_ln887_fu_114_p2() {
    icmp_ln887_fu_114_p2 = (!indvar_flatten_reg_103.read().is_01() || !ap_const_lv17_1FA40.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_103.read() == ap_const_lv17_1FA40);
}

void adaptive_threshold::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_mul_fu_180_p1() {
    mul_fu_180_p1 = pix_V_fu_142_p3.read();
}

void adaptive_threshold::thread_mul_fu_180_p2() {
    mul_fu_180_p2 = (!ap_const_lv65_19999999A.is_01() || !mul_fu_180_p1.read().is_01())? sc_lv<65>(): sc_biguint<65>(ap_const_lv65_19999999A) * sc_bigint<32>(mul_fu_180_p1.read());
}

void adaptive_threshold::thread_mul_ln1148_fu_160_p1() {
    mul_ln1148_fu_160_p1 = pix1_V_fu_149_p3.read();
}

void adaptive_threshold::thread_mul_ln1148_fu_160_p2() {
    mul_ln1148_fu_160_p2 = (!ap_const_lv65_10624DD30.is_01() || !mul_ln1148_fu_160_p1.read().is_01())? sc_lv<65>(): sc_biguint<65>(ap_const_lv65_10624DD30) * sc_bigint<32>(mul_ln1148_fu_160_p1.read());
}

void adaptive_threshold::thread_neg_mul_fu_219_p2() {
    neg_mul_fu_219_p2 = (!ap_const_lv65_0.is_01() || !mul_reg_339.read().is_01())? sc_lv<65>(): (sc_biguint<65>(ap_const_lv65_0) - sc_biguint<65>(mul_reg_339.read()));
}

void adaptive_threshold::thread_p_v10_v_fu_243_p3() {
    p_v10_v_fu_243_p3 = (!tmp_60_reg_322_pp0_iter2_reg.read()[0].is_01())? sc_lv<29>(): ((tmp_60_reg_322_pp0_iter2_reg.read()[0].to_bool())? tmp_61_fu_224_p4.read(): tmp_62_fu_234_p4.read());
}

void adaptive_threshold::thread_pix1_V_fu_149_p3() {
    pix1_V_fu_149_p3 = esl_concat<16,16>(tmp_64_reg_311.read(), ap_const_lv16_0);
}

void adaptive_threshold::thread_pix2_V_2_fu_284_p3() {
    pix2_V_2_fu_284_p3 = esl_concat<1,16>(icmp_ln1497_fu_279_p2.read(), ap_const_lv16_0);
}

void adaptive_threshold::thread_pix2_V_fu_273_p2() {
    pix2_V_fu_273_p2 = (!empty_499_fu_256_p3.read().is_01() || !sext_ln703_fu_269_p1.read().is_01())? sc_lv<29>(): (sc_biguint<29>(empty_499_fu_256_p3.read()) + sc_bigint<29>(sext_ln703_fu_269_p1.read()));
}

void adaptive_threshold::thread_pix_V_fu_142_p3() {
    pix_V_fu_142_p3 = esl_concat<16,16>(tmp_63_reg_306.read(), ap_const_lv16_0);
}

void adaptive_threshold::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void adaptive_threshold::thread_select_ln1148_1_fu_213_p3() {
    select_ln1148_1_fu_213_p3 = (!tmp_reg_316_pp0_iter2_reg.read()[0].is_01())? sc_lv<23>(): ((tmp_reg_316_pp0_iter2_reg.read()[0].to_bool())? sub_ln203_fu_207_p2.read(): tmp_59_reg_333.read());
}

void adaptive_threshold::thread_select_ln1148_fu_201_p3() {
    select_ln1148_fu_201_p3 = (!tmp_reg_316_pp0_iter2_reg.read()[0].is_01())? sc_lv<23>(): ((tmp_reg_316_pp0_iter2_reg.read()[0].to_bool())? tmp_58_fu_191_p4.read(): tmp_59_reg_333.read());
}

void adaptive_threshold::thread_sext_ln703_fu_269_p1() {
    sext_ln703_fu_269_p1 = esl_sext<29,23>(add_ln703_fu_263_p2.read());
}

void adaptive_threshold::thread_start_out() {
    start_out = real_start.read();
}

void adaptive_threshold::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void adaptive_threshold::thread_sub_ln1148_fu_186_p2() {
    sub_ln1148_fu_186_p2 = (!ap_const_lv65_0.is_01() || !mul_ln1148_reg_328.read().is_01())? sc_lv<65>(): (sc_biguint<65>(ap_const_lv65_0) - sc_biguint<65>(mul_ln1148_reg_328.read()));
}

void adaptive_threshold::thread_sub_ln203_fu_207_p2() {
    sub_ln203_fu_207_p2 = (!ap_const_lv23_0.is_01() || !select_ln1148_fu_201_p3.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_0) - sc_biguint<23>(select_ln1148_fu_201_p3.read()));
}

void adaptive_threshold::thread_sub_ln703_fu_250_p2() {
    sub_ln703_fu_250_p2 = (!ap_const_lv29_0.is_01() || !p_v10_v_fu_243_p3.read().is_01())? sc_lv<29>(): (sc_biguint<29>(ap_const_lv29_0) - sc_biguint<29>(p_v10_v_fu_243_p3.read()));
}

void adaptive_threshold::thread_tmp_58_fu_191_p4() {
    tmp_58_fu_191_p4 = sub_ln1148_fu_186_p2.read().range(64, 42);
}

void adaptive_threshold::thread_tmp_61_fu_224_p4() {
    tmp_61_fu_224_p4 = neg_mul_fu_219_p2.read().range(64, 36);
}

void adaptive_threshold::thread_tmp_62_fu_234_p4() {
    tmp_62_fu_234_p4 = mul_reg_339.read().range(64, 36);
}

void adaptive_threshold::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln887_fu_114_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln887_fu_114_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

