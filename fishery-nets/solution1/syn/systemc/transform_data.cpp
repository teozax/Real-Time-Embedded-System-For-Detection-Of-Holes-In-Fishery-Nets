// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "transform_data.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic transform_data::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic transform_data::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> transform_data::ap_ST_fsm_state1 = "1";
const sc_lv<3> transform_data::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> transform_data::ap_ST_fsm_state7 = "100";
const bool transform_data::ap_const_boolean_1 = true;
const sc_lv<32> transform_data::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> transform_data::ap_const_lv32_1 = "1";
const bool transform_data::ap_const_boolean_0 = false;
const sc_lv<1> transform_data::ap_const_lv1_0 = "0";
const sc_lv<1> transform_data::ap_const_lv1_1 = "1";
const sc_lv<17> transform_data::ap_const_lv17_0 = "00000000000000000";
const sc_lv<32> transform_data::ap_const_lv32_10000 = "10000000000000000";
const sc_lv<17> transform_data::ap_const_lv17_1FA40 = "11111101001000000";
const sc_lv<17> transform_data::ap_const_lv17_1 = "1";
const sc_lv<16> transform_data::ap_const_lv16_0 = "0000000000000000";
const sc_lv<50> transform_data::ap_const_lv50_1010102 = "1000000010000000100000010";
const sc_lv<32> transform_data::ap_const_lv32_20 = "100000";
const sc_lv<32> transform_data::ap_const_lv32_31 = "110001";
const sc_lv<15> transform_data::ap_const_lv15_0 = "000000000000000";
const sc_lv<32> transform_data::ap_const_lv32_10 = "10000";
const sc_lv<32> transform_data::ap_const_lv32_F = "1111";
const sc_lv<32> transform_data::ap_const_lv32_2 = "10";

transform_data::transform_data(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_I_2_V_V_blk_n);
    sensitive << ( I_2_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_I_2_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( p_Val2_s_fu_241_p2 );

    SC_METHOD(thread_I_2_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_I_COPY_V_V_blk_n);
    sensitive << ( I_COPY_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_I_COPY_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( tmp_V_202_fu_198_p1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_I_COPY_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_I_V_V_blk_n);
    sensitive << ( I_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_I_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( tmp_V_202_fu_198_p1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_I_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ONES_V_V_blk_n);
    sensitive << ( ONES_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_ONES_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ONES_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_add_ln25_fu_142_p2);
    sensitive << ( indvar_flatten_reg_125 );

    SC_METHOD(thread_and_ln412_fu_231_p2);
    sensitive << ( r_fu_219_p2 );
    sensitive << ( tmp_22_fu_224_p3 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( inputImage_data_stream_0_V_empty_n );
    sensitive << ( inputImage_data_stream_1_V_empty_n );
    sensitive << ( inputImage_data_stream_2_V_empty_n );
    sensitive << ( I_V_V_full_n );
    sensitive << ( I_COPY_V_V_full_n );
    sensitive << ( I_2_V_V_full_n );
    sensitive << ( ONES_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_252 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( inputImage_data_stream_0_V_empty_n );
    sensitive << ( inputImage_data_stream_1_V_empty_n );
    sensitive << ( inputImage_data_stream_2_V_empty_n );
    sensitive << ( I_V_V_full_n );
    sensitive << ( I_COPY_V_V_full_n );
    sensitive << ( I_2_V_V_full_n );
    sensitive << ( ONES_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_252 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( inputImage_data_stream_0_V_empty_n );
    sensitive << ( inputImage_data_stream_1_V_empty_n );
    sensitive << ( inputImage_data_stream_2_V_empty_n );
    sensitive << ( I_V_V_full_n );
    sensitive << ( I_COPY_V_V_full_n );
    sensitive << ( I_2_V_V_full_n );
    sensitive << ( ONES_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_252 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( inputImage_data_stream_0_V_empty_n );
    sensitive << ( inputImage_data_stream_1_V_empty_n );
    sensitive << ( inputImage_data_stream_2_V_empty_n );
    sensitive << ( icmp_ln25_reg_252 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);
    sensitive << ( I_V_V_full_n );
    sensitive << ( I_COPY_V_V_full_n );
    sensitive << ( I_2_V_V_full_n );
    sensitive << ( ONES_V_V_full_n );
    sensitive << ( icmp_ln25_reg_252_pp0_iter3_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln25_fu_136_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_i_V_1_fu_175_p1);
    sensitive << ( tmp_reg_266 );

    SC_METHOD(thread_i_V_fu_148_p3);
    sensitive << ( tmp_23_reg_261 );

    SC_METHOD(thread_icmp_ln25_fu_136_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_125 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_inputImage_data_stream_0_V_blk_n);
    sensitive << ( inputImage_data_stream_0_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln25_reg_252 );

    SC_METHOD(thread_inputImage_data_stream_0_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_252 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_inputImage_data_stream_1_V_blk_n);
    sensitive << ( inputImage_data_stream_1_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln25_reg_252 );

    SC_METHOD(thread_inputImage_data_stream_1_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_252 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_inputImage_data_stream_2_V_blk_n);
    sensitive << ( inputImage_data_stream_2_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln25_reg_252 );

    SC_METHOD(thread_inputImage_data_stream_2_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_252 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mul_ln1148_fu_159_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( mul_ln1148_fu_159_p10 );

    SC_METHOD(thread_mul_ln1148_fu_159_p10);
    sensitive << ( i_V_fu_148_p3 );

    SC_METHOD(thread_mul_ln1148_fu_159_p2);
    sensitive << ( mul_ln1148_fu_159_p1 );

    SC_METHOD(thread_p_Val2_s_fu_241_p2);
    sensitive << ( zext_ln412_fu_237_p1 );
    sensitive << ( trunc_ln_fu_203_p4 );

    SC_METHOD(thread_r_1_fu_192_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln25_reg_252_pp0_iter2_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( trunc_ln718_fu_188_p1 );

    SC_METHOD(thread_r_V_fu_182_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( zext_ln1116_fu_178_p1 );

    SC_METHOD(thread_r_V_fu_182_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( zext_ln1116_fu_178_p1 );

    SC_METHOD(thread_r_V_fu_182_p2);
    sensitive << ( r_V_fu_182_p0 );
    sensitive << ( r_V_fu_182_p1 );

    SC_METHOD(thread_r_fu_219_p2);
    sensitive << ( r_1_reg_283 );
    sensitive << ( tmp_21_fu_212_p3 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_21_fu_212_p3);
    sensitive << ( r_V_reg_276 );

    SC_METHOD(thread_tmp_22_fu_224_p3);
    sensitive << ( r_V_reg_276 );

    SC_METHOD(thread_tmp_V_202_fu_198_p1);
    sensitive << ( i_V_1_reg_271 );

    SC_METHOD(thread_trunc_ln718_fu_188_p1);
    sensitive << ( r_V_fu_182_p2 );

    SC_METHOD(thread_trunc_ln_fu_203_p4);
    sensitive << ( r_V_reg_276 );

    SC_METHOD(thread_zext_ln1116_fu_178_p1);
    sensitive << ( i_V_1_fu_175_p1 );

    SC_METHOD(thread_zext_ln412_fu_237_p1);
    sensitive << ( and_ln412_fu_231_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln25_fu_136_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "transform_data_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, inputImage_data_stream_0_V_dout, "(port)inputImage_data_stream_0_V_dout");
    sc_trace(mVcdFile, inputImage_data_stream_0_V_empty_n, "(port)inputImage_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, inputImage_data_stream_0_V_read, "(port)inputImage_data_stream_0_V_read");
    sc_trace(mVcdFile, inputImage_data_stream_1_V_dout, "(port)inputImage_data_stream_1_V_dout");
    sc_trace(mVcdFile, inputImage_data_stream_1_V_empty_n, "(port)inputImage_data_stream_1_V_empty_n");
    sc_trace(mVcdFile, inputImage_data_stream_1_V_read, "(port)inputImage_data_stream_1_V_read");
    sc_trace(mVcdFile, inputImage_data_stream_2_V_dout, "(port)inputImage_data_stream_2_V_dout");
    sc_trace(mVcdFile, inputImage_data_stream_2_V_empty_n, "(port)inputImage_data_stream_2_V_empty_n");
    sc_trace(mVcdFile, inputImage_data_stream_2_V_read, "(port)inputImage_data_stream_2_V_read");
    sc_trace(mVcdFile, I_V_V_din, "(port)I_V_V_din");
    sc_trace(mVcdFile, I_V_V_full_n, "(port)I_V_V_full_n");
    sc_trace(mVcdFile, I_V_V_write, "(port)I_V_V_write");
    sc_trace(mVcdFile, I_COPY_V_V_din, "(port)I_COPY_V_V_din");
    sc_trace(mVcdFile, I_COPY_V_V_full_n, "(port)I_COPY_V_V_full_n");
    sc_trace(mVcdFile, I_COPY_V_V_write, "(port)I_COPY_V_V_write");
    sc_trace(mVcdFile, I_2_V_V_din, "(port)I_2_V_V_din");
    sc_trace(mVcdFile, I_2_V_V_full_n, "(port)I_2_V_V_full_n");
    sc_trace(mVcdFile, I_2_V_V_write, "(port)I_2_V_V_write");
    sc_trace(mVcdFile, ONES_V_V_din, "(port)ONES_V_V_din");
    sc_trace(mVcdFile, ONES_V_V_full_n, "(port)ONES_V_V_full_n");
    sc_trace(mVcdFile, ONES_V_V_write, "(port)ONES_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, inputImage_data_stream_0_V_blk_n, "inputImage_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln25_reg_252, "icmp_ln25_reg_252");
    sc_trace(mVcdFile, inputImage_data_stream_1_V_blk_n, "inputImage_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, inputImage_data_stream_2_V_blk_n, "inputImage_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, I_V_V_blk_n, "I_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, icmp_ln25_reg_252_pp0_iter3_reg, "icmp_ln25_reg_252_pp0_iter3_reg");
    sc_trace(mVcdFile, I_COPY_V_V_blk_n, "I_COPY_V_V_blk_n");
    sc_trace(mVcdFile, I_2_V_V_blk_n, "I_2_V_V_blk_n");
    sc_trace(mVcdFile, ONES_V_V_blk_n, "ONES_V_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_125, "indvar_flatten_reg_125");
    sc_trace(mVcdFile, icmp_ln25_fu_136_p2, "icmp_ln25_fu_136_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln25_reg_252_pp0_iter1_reg, "icmp_ln25_reg_252_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_252_pp0_iter2_reg, "icmp_ln25_reg_252_pp0_iter2_reg");
    sc_trace(mVcdFile, add_ln25_fu_142_p2, "add_ln25_fu_142_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_23_reg_261, "tmp_23_reg_261");
    sc_trace(mVcdFile, tmp_reg_266, "tmp_reg_266");
    sc_trace(mVcdFile, i_V_1_fu_175_p1, "i_V_1_fu_175_p1");
    sc_trace(mVcdFile, i_V_1_reg_271, "i_V_1_reg_271");
    sc_trace(mVcdFile, r_V_fu_182_p2, "r_V_fu_182_p2");
    sc_trace(mVcdFile, r_V_reg_276, "r_V_reg_276");
    sc_trace(mVcdFile, r_1_fu_192_p2, "r_1_fu_192_p2");
    sc_trace(mVcdFile, r_1_reg_283, "r_1_reg_283");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, tmp_V_202_fu_198_p1, "tmp_V_202_fu_198_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, i_V_fu_148_p3, "i_V_fu_148_p3");
    sc_trace(mVcdFile, mul_ln1148_fu_159_p1, "mul_ln1148_fu_159_p1");
    sc_trace(mVcdFile, mul_ln1148_fu_159_p2, "mul_ln1148_fu_159_p2");
    sc_trace(mVcdFile, r_V_fu_182_p0, "r_V_fu_182_p0");
    sc_trace(mVcdFile, zext_ln1116_fu_178_p1, "zext_ln1116_fu_178_p1");
    sc_trace(mVcdFile, r_V_fu_182_p1, "r_V_fu_182_p1");
    sc_trace(mVcdFile, trunc_ln718_fu_188_p1, "trunc_ln718_fu_188_p1");
    sc_trace(mVcdFile, tmp_21_fu_212_p3, "tmp_21_fu_212_p3");
    sc_trace(mVcdFile, r_fu_219_p2, "r_fu_219_p2");
    sc_trace(mVcdFile, tmp_22_fu_224_p3, "tmp_22_fu_224_p3");
    sc_trace(mVcdFile, and_ln412_fu_231_p2, "and_ln412_fu_231_p2");
    sc_trace(mVcdFile, zext_ln412_fu_237_p1, "zext_ln412_fu_237_p1");
    sc_trace(mVcdFile, trunc_ln_fu_203_p4, "trunc_ln_fu_203_p4");
    sc_trace(mVcdFile, p_Val2_s_fu_241_p2, "p_Val2_s_fu_241_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, mul_ln1148_fu_159_p10, "mul_ln1148_fu_159_p10");
#endif

    }
}

transform_data::~transform_data() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void transform_data::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter4 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_136_p2.read()))) {
        indvar_flatten_reg_125 = add_ln25_fu_142_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_125 = ap_const_lv17_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter2_reg.read()))) {
        i_V_1_reg_271 = i_V_1_fu_175_p1.read();
        r_1_reg_283 = r_1_fu_192_p2.read();
        r_V_reg_276 = r_V_fu_182_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln25_reg_252 = icmp_ln25_fu_136_p2.read();
        icmp_ln25_reg_252_pp0_iter1_reg = icmp_ln25_reg_252.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln25_reg_252_pp0_iter2_reg = icmp_ln25_reg_252_pp0_iter1_reg.read();
        icmp_ln25_reg_252_pp0_iter3_reg = icmp_ln25_reg_252_pp0_iter2_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_23_reg_261 = inputImage_data_stream_2_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter1_reg.read()))) {
        tmp_reg_266 = mul_ln1148_fu_159_p2.read().range(49, 32);
    }
}

void transform_data::thread_I_2_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()))) {
        I_2_V_V_blk_n = I_2_V_V_full_n.read();
    } else {
        I_2_V_V_blk_n = ap_const_logic_1;
    }
}

void transform_data::thread_I_2_V_V_din() {
    I_2_V_V_din = esl_zext<32,17>(p_Val2_s_fu_241_p2.read());
}

void transform_data::thread_I_2_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        I_2_V_V_write = ap_const_logic_1;
    } else {
        I_2_V_V_write = ap_const_logic_0;
    }
}

void transform_data::thread_I_COPY_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()))) {
        I_COPY_V_V_blk_n = I_COPY_V_V_full_n.read();
    } else {
        I_COPY_V_V_blk_n = ap_const_logic_1;
    }
}

void transform_data::thread_I_COPY_V_V_din() {
    I_COPY_V_V_din = tmp_V_202_fu_198_p1.read();
}

void transform_data::thread_I_COPY_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        I_COPY_V_V_write = ap_const_logic_1;
    } else {
        I_COPY_V_V_write = ap_const_logic_0;
    }
}

void transform_data::thread_I_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()))) {
        I_V_V_blk_n = I_V_V_full_n.read();
    } else {
        I_V_V_blk_n = ap_const_logic_1;
    }
}

void transform_data::thread_I_V_V_din() {
    I_V_V_din = tmp_V_202_fu_198_p1.read();
}

void transform_data::thread_I_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        I_V_V_write = ap_const_logic_1;
    } else {
        I_V_V_write = ap_const_logic_0;
    }
}

void transform_data::thread_ONES_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()))) {
        ONES_V_V_blk_n = ONES_V_V_full_n.read();
    } else {
        ONES_V_V_blk_n = ap_const_logic_1;
    }
}

void transform_data::thread_ONES_V_V_din() {
    ONES_V_V_din = ap_const_lv32_10000;
}

void transform_data::thread_ONES_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ONES_V_V_write = ap_const_logic_1;
    } else {
        ONES_V_V_write = ap_const_logic_0;
    }
}

void transform_data::thread_add_ln25_fu_142_p2() {
    add_ln25_fu_142_p2 = (!indvar_flatten_reg_125.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(indvar_flatten_reg_125.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void transform_data::thread_and_ln412_fu_231_p2() {
    and_ln412_fu_231_p2 = (r_fu_219_p2.read() & tmp_22_fu_224_p3.read());
}

void transform_data::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void transform_data::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void transform_data::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[2];
}

void transform_data::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void transform_data::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_0_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_2_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_COPY_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_2_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ONES_V_V_full_n.read())))));
}

void transform_data::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_0_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_2_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_COPY_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_2_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ONES_V_V_full_n.read())))));
}

void transform_data::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_0_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_2_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_COPY_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, I_2_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, ONES_V_V_full_n.read())))));
}

void transform_data::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void transform_data::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void transform_data::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_0_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_1_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inputImage_data_stream_2_V_empty_n.read())));
}

void transform_data::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void transform_data::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void transform_data::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, I_V_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, I_COPY_V_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, I_2_V_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_reg_252_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ONES_V_V_full_n.read())));
}

void transform_data::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln25_fu_136_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void transform_data::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void transform_data::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void transform_data::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void transform_data::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void transform_data::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void transform_data::thread_i_V_1_fu_175_p1() {
    i_V_1_fu_175_p1 = esl_sext<24,18>(tmp_reg_266.read());
}

void transform_data::thread_i_V_fu_148_p3() {
    i_V_fu_148_p3 = esl_concat<8,16>(tmp_23_reg_261.read(), ap_const_lv16_0);
}

void transform_data::thread_icmp_ln25_fu_136_p2() {
    icmp_ln25_fu_136_p2 = (!indvar_flatten_reg_125.read().is_01() || !ap_const_lv17_1FA40.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_125.read() == ap_const_lv17_1FA40);
}

void transform_data::thread_inputImage_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0))) {
        inputImage_data_stream_0_V_blk_n = inputImage_data_stream_0_V_empty_n.read();
    } else {
        inputImage_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void transform_data::thread_inputImage_data_stream_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inputImage_data_stream_0_V_read = ap_const_logic_1;
    } else {
        inputImage_data_stream_0_V_read = ap_const_logic_0;
    }
}

void transform_data::thread_inputImage_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0))) {
        inputImage_data_stream_1_V_blk_n = inputImage_data_stream_1_V_empty_n.read();
    } else {
        inputImage_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void transform_data::thread_inputImage_data_stream_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inputImage_data_stream_1_V_read = ap_const_logic_1;
    } else {
        inputImage_data_stream_1_V_read = ap_const_logic_0;
    }
}

void transform_data::thread_inputImage_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0))) {
        inputImage_data_stream_2_V_blk_n = inputImage_data_stream_2_V_empty_n.read();
    } else {
        inputImage_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void transform_data::thread_inputImage_data_stream_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_252.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inputImage_data_stream_2_V_read = ap_const_logic_1;
    } else {
        inputImage_data_stream_2_V_read = ap_const_logic_0;
    }
}

void transform_data::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void transform_data::thread_mul_ln1148_fu_159_p1() {
    mul_ln1148_fu_159_p1 =  (sc_lv<24>) (mul_ln1148_fu_159_p10.read());
}

void transform_data::thread_mul_ln1148_fu_159_p10() {
    mul_ln1148_fu_159_p10 = esl_zext<50,24>(i_V_fu_148_p3.read());
}

void transform_data::thread_mul_ln1148_fu_159_p2() {
    mul_ln1148_fu_159_p2 = (!ap_const_lv50_1010102.is_01() || !mul_ln1148_fu_159_p1.read().is_01())? sc_lv<50>(): sc_biguint<50>(ap_const_lv50_1010102) * sc_biguint<24>(mul_ln1148_fu_159_p1.read());
}

void transform_data::thread_p_Val2_s_fu_241_p2() {
    p_Val2_s_fu_241_p2 = (!zext_ln412_fu_237_p1.read().is_01() || !trunc_ln_fu_203_p4.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln412_fu_237_p1.read()) + sc_biguint<17>(trunc_ln_fu_203_p4.read()));
}

void transform_data::thread_r_1_fu_192_p2() {
    r_1_fu_192_p2 = (!trunc_ln718_fu_188_p1.read().is_01() || !ap_const_lv15_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln718_fu_188_p1.read() != ap_const_lv15_0);
}

void transform_data::thread_r_V_fu_182_p0() {
    r_V_fu_182_p0 =  (sc_lv<24>) (zext_ln1116_fu_178_p1.read());
}

void transform_data::thread_r_V_fu_182_p1() {
    r_V_fu_182_p1 =  (sc_lv<24>) (zext_ln1116_fu_178_p1.read());
}

void transform_data::thread_r_V_fu_182_p2() {
    r_V_fu_182_p2 = (!r_V_fu_182_p0.read().is_01() || !r_V_fu_182_p1.read().is_01())? sc_lv<48>(): sc_biguint<24>(r_V_fu_182_p0.read()) * sc_biguint<24>(r_V_fu_182_p1.read());
}

void transform_data::thread_r_fu_219_p2() {
    r_fu_219_p2 = (r_1_reg_283.read() | tmp_21_fu_212_p3.read());
}

void transform_data::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void transform_data::thread_start_out() {
    start_out = real_start.read();
}

void transform_data::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void transform_data::thread_tmp_21_fu_212_p3() {
    tmp_21_fu_212_p3 = r_V_reg_276.read().range(16, 16);
}

void transform_data::thread_tmp_22_fu_224_p3() {
    tmp_22_fu_224_p3 = r_V_reg_276.read().range(15, 15);
}

void transform_data::thread_tmp_V_202_fu_198_p1() {
    tmp_V_202_fu_198_p1 = esl_zext<32,24>(i_V_1_reg_271.read());
}

void transform_data::thread_trunc_ln718_fu_188_p1() {
    trunc_ln718_fu_188_p1 = r_V_fu_182_p2.read().range(15-1, 0);
}

void transform_data::thread_trunc_ln_fu_203_p4() {
    trunc_ln_fu_203_p4 = r_V_reg_276.read().range(32, 16);
}

void transform_data::thread_zext_ln1116_fu_178_p1() {
    zext_ln1116_fu_178_p1 = esl_zext<48,24>(i_V_1_fu_175_p1.read());
}

void transform_data::thread_zext_ln412_fu_237_p1() {
    zext_ln412_fu_237_p1 = esl_zext<17,1>(and_ln412_fu_231_p2.read());
}

void transform_data::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln25_fu_136_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln25_fu_136_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

