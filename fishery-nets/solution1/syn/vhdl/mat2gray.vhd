-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mat2gray is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    M_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    M_data_stream_V_empty_n : IN STD_LOGIC;
    M_data_stream_V_read : OUT STD_LOGIC;
    I_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    I_data_stream_V_full_n : IN STD_LOGIC;
    I_data_stream_V_write : OUT STD_LOGIC;
    min_value_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    min_value_empty_n : IN STD_LOGIC;
    min_value_read : OUT STD_LOGIC;
    max_value_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    max_value_empty_n : IN STD_LOGIC;
    max_value_read : OUT STD_LOGIC );
end;


architecture behav of mat2gray is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_640000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011001000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1FA40 : STD_LOGIC_VECTOR (16 downto 0) := "11111101001000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal M_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln887_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal I_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal icmp_ln887_reg_305_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal min_value_blk_n : STD_LOGIC;
    signal max_value_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_105 : STD_LOGIC_VECTOR (16 downto 0);
    signal max_V_fu_127_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_V_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal min_V_fu_135_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_V_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_143_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_V_reg_295 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1148_fu_157_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal sext_ln1148_reg_300 : STD_LOGIC_VECTOR (48 downto 0);
    signal icmp_ln887_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln887_reg_305_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_305_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln887_fu_167_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln87_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_314_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sdiv_ln1148_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln88_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter19_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter20_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter21_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter22_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter23_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter24_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter25_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter26_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter27_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter28_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter29_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter30_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter31_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter32_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter33_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter34_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter35_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter36_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter37_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter38_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter39_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter40_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter41_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter42_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter43_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter44_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter45_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter46_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter47_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter48_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter49_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter50_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter51_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter52_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter53_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter54_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter55_i_V_3_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lhs_V_1_fu_147_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_6_fu_151_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_11_fu_173_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln87_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_203_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_8_fu_207_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_V_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln851_fu_252_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_234_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln851_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_7_fu_262_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_244_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_220_ce : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_431 : BOOLEAN;

    component net_holes_detectidhF IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    net_holes_detectidhF_U152 : component net_holes_detectidhF
    generic map (
        ID => 1,
        NUM_STAGE => 53,
        din0_WIDTH => 49,
        din1_WIDTH => 33,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                elsif ((not(((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_i_V_3_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_431)) then
                if (((ap_const_lv1_0 = and_ln87_fu_197_p2) and (icmp_ln887_reg_305 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_i_V_3_reg_116 <= ap_const_lv32_640000;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_i_V_3_reg_116 <= ap_phi_reg_pp0_iter1_i_V_3_reg_116;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter55_i_V_3_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter54 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln887_reg_305_pp0_iter53_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln87_reg_314_pp0_iter53_reg))) then 
                    ap_phi_reg_pp0_iter55_i_V_3_reg_116 <= mul_ln88_fu_228_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter55_i_V_3_reg_116 <= ap_phi_reg_pp0_iter54_i_V_3_reg_116;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_105 <= add_ln887_fu_167_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_105 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln87_reg_314 <= and_ln87_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln87_reg_314_pp0_iter10_reg <= and_ln87_reg_314_pp0_iter9_reg;
                and_ln87_reg_314_pp0_iter11_reg <= and_ln87_reg_314_pp0_iter10_reg;
                and_ln87_reg_314_pp0_iter12_reg <= and_ln87_reg_314_pp0_iter11_reg;
                and_ln87_reg_314_pp0_iter13_reg <= and_ln87_reg_314_pp0_iter12_reg;
                and_ln87_reg_314_pp0_iter14_reg <= and_ln87_reg_314_pp0_iter13_reg;
                and_ln87_reg_314_pp0_iter15_reg <= and_ln87_reg_314_pp0_iter14_reg;
                and_ln87_reg_314_pp0_iter16_reg <= and_ln87_reg_314_pp0_iter15_reg;
                and_ln87_reg_314_pp0_iter17_reg <= and_ln87_reg_314_pp0_iter16_reg;
                and_ln87_reg_314_pp0_iter18_reg <= and_ln87_reg_314_pp0_iter17_reg;
                and_ln87_reg_314_pp0_iter19_reg <= and_ln87_reg_314_pp0_iter18_reg;
                and_ln87_reg_314_pp0_iter20_reg <= and_ln87_reg_314_pp0_iter19_reg;
                and_ln87_reg_314_pp0_iter21_reg <= and_ln87_reg_314_pp0_iter20_reg;
                and_ln87_reg_314_pp0_iter22_reg <= and_ln87_reg_314_pp0_iter21_reg;
                and_ln87_reg_314_pp0_iter23_reg <= and_ln87_reg_314_pp0_iter22_reg;
                and_ln87_reg_314_pp0_iter24_reg <= and_ln87_reg_314_pp0_iter23_reg;
                and_ln87_reg_314_pp0_iter25_reg <= and_ln87_reg_314_pp0_iter24_reg;
                and_ln87_reg_314_pp0_iter26_reg <= and_ln87_reg_314_pp0_iter25_reg;
                and_ln87_reg_314_pp0_iter27_reg <= and_ln87_reg_314_pp0_iter26_reg;
                and_ln87_reg_314_pp0_iter28_reg <= and_ln87_reg_314_pp0_iter27_reg;
                and_ln87_reg_314_pp0_iter29_reg <= and_ln87_reg_314_pp0_iter28_reg;
                and_ln87_reg_314_pp0_iter2_reg <= and_ln87_reg_314;
                and_ln87_reg_314_pp0_iter30_reg <= and_ln87_reg_314_pp0_iter29_reg;
                and_ln87_reg_314_pp0_iter31_reg <= and_ln87_reg_314_pp0_iter30_reg;
                and_ln87_reg_314_pp0_iter32_reg <= and_ln87_reg_314_pp0_iter31_reg;
                and_ln87_reg_314_pp0_iter33_reg <= and_ln87_reg_314_pp0_iter32_reg;
                and_ln87_reg_314_pp0_iter34_reg <= and_ln87_reg_314_pp0_iter33_reg;
                and_ln87_reg_314_pp0_iter35_reg <= and_ln87_reg_314_pp0_iter34_reg;
                and_ln87_reg_314_pp0_iter36_reg <= and_ln87_reg_314_pp0_iter35_reg;
                and_ln87_reg_314_pp0_iter37_reg <= and_ln87_reg_314_pp0_iter36_reg;
                and_ln87_reg_314_pp0_iter38_reg <= and_ln87_reg_314_pp0_iter37_reg;
                and_ln87_reg_314_pp0_iter39_reg <= and_ln87_reg_314_pp0_iter38_reg;
                and_ln87_reg_314_pp0_iter3_reg <= and_ln87_reg_314_pp0_iter2_reg;
                and_ln87_reg_314_pp0_iter40_reg <= and_ln87_reg_314_pp0_iter39_reg;
                and_ln87_reg_314_pp0_iter41_reg <= and_ln87_reg_314_pp0_iter40_reg;
                and_ln87_reg_314_pp0_iter42_reg <= and_ln87_reg_314_pp0_iter41_reg;
                and_ln87_reg_314_pp0_iter43_reg <= and_ln87_reg_314_pp0_iter42_reg;
                and_ln87_reg_314_pp0_iter44_reg <= and_ln87_reg_314_pp0_iter43_reg;
                and_ln87_reg_314_pp0_iter45_reg <= and_ln87_reg_314_pp0_iter44_reg;
                and_ln87_reg_314_pp0_iter46_reg <= and_ln87_reg_314_pp0_iter45_reg;
                and_ln87_reg_314_pp0_iter47_reg <= and_ln87_reg_314_pp0_iter46_reg;
                and_ln87_reg_314_pp0_iter48_reg <= and_ln87_reg_314_pp0_iter47_reg;
                and_ln87_reg_314_pp0_iter49_reg <= and_ln87_reg_314_pp0_iter48_reg;
                and_ln87_reg_314_pp0_iter4_reg <= and_ln87_reg_314_pp0_iter3_reg;
                and_ln87_reg_314_pp0_iter50_reg <= and_ln87_reg_314_pp0_iter49_reg;
                and_ln87_reg_314_pp0_iter51_reg <= and_ln87_reg_314_pp0_iter50_reg;
                and_ln87_reg_314_pp0_iter52_reg <= and_ln87_reg_314_pp0_iter51_reg;
                and_ln87_reg_314_pp0_iter53_reg <= and_ln87_reg_314_pp0_iter52_reg;
                and_ln87_reg_314_pp0_iter5_reg <= and_ln87_reg_314_pp0_iter4_reg;
                and_ln87_reg_314_pp0_iter6_reg <= and_ln87_reg_314_pp0_iter5_reg;
                and_ln87_reg_314_pp0_iter7_reg <= and_ln87_reg_314_pp0_iter6_reg;
                and_ln87_reg_314_pp0_iter8_reg <= and_ln87_reg_314_pp0_iter7_reg;
                and_ln87_reg_314_pp0_iter9_reg <= and_ln87_reg_314_pp0_iter8_reg;
                icmp_ln887_reg_305_pp0_iter10_reg <= icmp_ln887_reg_305_pp0_iter9_reg;
                icmp_ln887_reg_305_pp0_iter11_reg <= icmp_ln887_reg_305_pp0_iter10_reg;
                icmp_ln887_reg_305_pp0_iter12_reg <= icmp_ln887_reg_305_pp0_iter11_reg;
                icmp_ln887_reg_305_pp0_iter13_reg <= icmp_ln887_reg_305_pp0_iter12_reg;
                icmp_ln887_reg_305_pp0_iter14_reg <= icmp_ln887_reg_305_pp0_iter13_reg;
                icmp_ln887_reg_305_pp0_iter15_reg <= icmp_ln887_reg_305_pp0_iter14_reg;
                icmp_ln887_reg_305_pp0_iter16_reg <= icmp_ln887_reg_305_pp0_iter15_reg;
                icmp_ln887_reg_305_pp0_iter17_reg <= icmp_ln887_reg_305_pp0_iter16_reg;
                icmp_ln887_reg_305_pp0_iter18_reg <= icmp_ln887_reg_305_pp0_iter17_reg;
                icmp_ln887_reg_305_pp0_iter19_reg <= icmp_ln887_reg_305_pp0_iter18_reg;
                icmp_ln887_reg_305_pp0_iter20_reg <= icmp_ln887_reg_305_pp0_iter19_reg;
                icmp_ln887_reg_305_pp0_iter21_reg <= icmp_ln887_reg_305_pp0_iter20_reg;
                icmp_ln887_reg_305_pp0_iter22_reg <= icmp_ln887_reg_305_pp0_iter21_reg;
                icmp_ln887_reg_305_pp0_iter23_reg <= icmp_ln887_reg_305_pp0_iter22_reg;
                icmp_ln887_reg_305_pp0_iter24_reg <= icmp_ln887_reg_305_pp0_iter23_reg;
                icmp_ln887_reg_305_pp0_iter25_reg <= icmp_ln887_reg_305_pp0_iter24_reg;
                icmp_ln887_reg_305_pp0_iter26_reg <= icmp_ln887_reg_305_pp0_iter25_reg;
                icmp_ln887_reg_305_pp0_iter27_reg <= icmp_ln887_reg_305_pp0_iter26_reg;
                icmp_ln887_reg_305_pp0_iter28_reg <= icmp_ln887_reg_305_pp0_iter27_reg;
                icmp_ln887_reg_305_pp0_iter29_reg <= icmp_ln887_reg_305_pp0_iter28_reg;
                icmp_ln887_reg_305_pp0_iter2_reg <= icmp_ln887_reg_305_pp0_iter1_reg;
                icmp_ln887_reg_305_pp0_iter30_reg <= icmp_ln887_reg_305_pp0_iter29_reg;
                icmp_ln887_reg_305_pp0_iter31_reg <= icmp_ln887_reg_305_pp0_iter30_reg;
                icmp_ln887_reg_305_pp0_iter32_reg <= icmp_ln887_reg_305_pp0_iter31_reg;
                icmp_ln887_reg_305_pp0_iter33_reg <= icmp_ln887_reg_305_pp0_iter32_reg;
                icmp_ln887_reg_305_pp0_iter34_reg <= icmp_ln887_reg_305_pp0_iter33_reg;
                icmp_ln887_reg_305_pp0_iter35_reg <= icmp_ln887_reg_305_pp0_iter34_reg;
                icmp_ln887_reg_305_pp0_iter36_reg <= icmp_ln887_reg_305_pp0_iter35_reg;
                icmp_ln887_reg_305_pp0_iter37_reg <= icmp_ln887_reg_305_pp0_iter36_reg;
                icmp_ln887_reg_305_pp0_iter38_reg <= icmp_ln887_reg_305_pp0_iter37_reg;
                icmp_ln887_reg_305_pp0_iter39_reg <= icmp_ln887_reg_305_pp0_iter38_reg;
                icmp_ln887_reg_305_pp0_iter3_reg <= icmp_ln887_reg_305_pp0_iter2_reg;
                icmp_ln887_reg_305_pp0_iter40_reg <= icmp_ln887_reg_305_pp0_iter39_reg;
                icmp_ln887_reg_305_pp0_iter41_reg <= icmp_ln887_reg_305_pp0_iter40_reg;
                icmp_ln887_reg_305_pp0_iter42_reg <= icmp_ln887_reg_305_pp0_iter41_reg;
                icmp_ln887_reg_305_pp0_iter43_reg <= icmp_ln887_reg_305_pp0_iter42_reg;
                icmp_ln887_reg_305_pp0_iter44_reg <= icmp_ln887_reg_305_pp0_iter43_reg;
                icmp_ln887_reg_305_pp0_iter45_reg <= icmp_ln887_reg_305_pp0_iter44_reg;
                icmp_ln887_reg_305_pp0_iter46_reg <= icmp_ln887_reg_305_pp0_iter45_reg;
                icmp_ln887_reg_305_pp0_iter47_reg <= icmp_ln887_reg_305_pp0_iter46_reg;
                icmp_ln887_reg_305_pp0_iter48_reg <= icmp_ln887_reg_305_pp0_iter47_reg;
                icmp_ln887_reg_305_pp0_iter49_reg <= icmp_ln887_reg_305_pp0_iter48_reg;
                icmp_ln887_reg_305_pp0_iter4_reg <= icmp_ln887_reg_305_pp0_iter3_reg;
                icmp_ln887_reg_305_pp0_iter50_reg <= icmp_ln887_reg_305_pp0_iter49_reg;
                icmp_ln887_reg_305_pp0_iter51_reg <= icmp_ln887_reg_305_pp0_iter50_reg;
                icmp_ln887_reg_305_pp0_iter52_reg <= icmp_ln887_reg_305_pp0_iter51_reg;
                icmp_ln887_reg_305_pp0_iter53_reg <= icmp_ln887_reg_305_pp0_iter52_reg;
                icmp_ln887_reg_305_pp0_iter54_reg <= icmp_ln887_reg_305_pp0_iter53_reg;
                icmp_ln887_reg_305_pp0_iter5_reg <= icmp_ln887_reg_305_pp0_iter4_reg;
                icmp_ln887_reg_305_pp0_iter6_reg <= icmp_ln887_reg_305_pp0_iter5_reg;
                icmp_ln887_reg_305_pp0_iter7_reg <= icmp_ln887_reg_305_pp0_iter6_reg;
                icmp_ln887_reg_305_pp0_iter8_reg <= icmp_ln887_reg_305_pp0_iter7_reg;
                icmp_ln887_reg_305_pp0_iter9_reg <= icmp_ln887_reg_305_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_i_V_3_reg_116 <= ap_phi_reg_pp0_iter9_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_i_V_3_reg_116 <= ap_phi_reg_pp0_iter10_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_i_V_3_reg_116 <= ap_phi_reg_pp0_iter11_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_i_V_3_reg_116 <= ap_phi_reg_pp0_iter12_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_i_V_3_reg_116 <= ap_phi_reg_pp0_iter13_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_i_V_3_reg_116 <= ap_phi_reg_pp0_iter14_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_i_V_3_reg_116 <= ap_phi_reg_pp0_iter15_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_i_V_3_reg_116 <= ap_phi_reg_pp0_iter16_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_i_V_3_reg_116 <= ap_phi_reg_pp0_iter17_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_i_V_3_reg_116 <= ap_phi_reg_pp0_iter18_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_i_V_3_reg_116 <= ap_phi_reg_pp0_iter0_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_i_V_3_reg_116 <= ap_phi_reg_pp0_iter19_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_i_V_3_reg_116 <= ap_phi_reg_pp0_iter20_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_i_V_3_reg_116 <= ap_phi_reg_pp0_iter21_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_i_V_3_reg_116 <= ap_phi_reg_pp0_iter22_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_i_V_3_reg_116 <= ap_phi_reg_pp0_iter23_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_i_V_3_reg_116 <= ap_phi_reg_pp0_iter24_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_i_V_3_reg_116 <= ap_phi_reg_pp0_iter25_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter27_i_V_3_reg_116 <= ap_phi_reg_pp0_iter26_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter28_i_V_3_reg_116 <= ap_phi_reg_pp0_iter27_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter29_i_V_3_reg_116 <= ap_phi_reg_pp0_iter28_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter30_i_V_3_reg_116 <= ap_phi_reg_pp0_iter29_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter31_i_V_3_reg_116 <= ap_phi_reg_pp0_iter30_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter31 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter32_i_V_3_reg_116 <= ap_phi_reg_pp0_iter31_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter33_i_V_3_reg_116 <= ap_phi_reg_pp0_iter32_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter33 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter34_i_V_3_reg_116 <= ap_phi_reg_pp0_iter33_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter35_i_V_3_reg_116 <= ap_phi_reg_pp0_iter34_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter35 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter36_i_V_3_reg_116 <= ap_phi_reg_pp0_iter35_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter36 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter37_i_V_3_reg_116 <= ap_phi_reg_pp0_iter36_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter37 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter38_i_V_3_reg_116 <= ap_phi_reg_pp0_iter37_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter38 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter39_i_V_3_reg_116 <= ap_phi_reg_pp0_iter38_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_i_V_3_reg_116 <= ap_phi_reg_pp0_iter2_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter40_i_V_3_reg_116 <= ap_phi_reg_pp0_iter39_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter40 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter41_i_V_3_reg_116 <= ap_phi_reg_pp0_iter40_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter41 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter42_i_V_3_reg_116 <= ap_phi_reg_pp0_iter41_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter43_i_V_3_reg_116 <= ap_phi_reg_pp0_iter42_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter43 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter44_i_V_3_reg_116 <= ap_phi_reg_pp0_iter43_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter44 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter45_i_V_3_reg_116 <= ap_phi_reg_pp0_iter44_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter45 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter46_i_V_3_reg_116 <= ap_phi_reg_pp0_iter45_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter46 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter47_i_V_3_reg_116 <= ap_phi_reg_pp0_iter46_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter48_i_V_3_reg_116 <= ap_phi_reg_pp0_iter47_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter48 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter49_i_V_3_reg_116 <= ap_phi_reg_pp0_iter48_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_i_V_3_reg_116 <= ap_phi_reg_pp0_iter3_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter49 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter50_i_V_3_reg_116 <= ap_phi_reg_pp0_iter49_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter50 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter51_i_V_3_reg_116 <= ap_phi_reg_pp0_iter50_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter51 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter52_i_V_3_reg_116 <= ap_phi_reg_pp0_iter51_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter52 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter53_i_V_3_reg_116 <= ap_phi_reg_pp0_iter52_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter53 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter54_i_V_3_reg_116 <= ap_phi_reg_pp0_iter53_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_i_V_3_reg_116 <= ap_phi_reg_pp0_iter4_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_i_V_3_reg_116 <= ap_phi_reg_pp0_iter5_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_i_V_3_reg_116 <= ap_phi_reg_pp0_iter6_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_i_V_3_reg_116 <= ap_phi_reg_pp0_iter7_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_i_V_3_reg_116 <= ap_phi_reg_pp0_iter8_i_V_3_reg_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln887_reg_305 <= icmp_ln887_fu_161_p2;
                icmp_ln887_reg_305_pp0_iter1_reg <= icmp_ln887_reg_305;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    max_V_reg_285(31 downto 16) <= max_V_fu_127_p3(31 downto 16);
                    min_V_reg_290(31 downto 16) <= min_V_fu_135_p3(31 downto 16);
                    rhs_V_reg_295(32 downto 16) <= rhs_V_fu_143_p1(32 downto 16);
                    sext_ln1148_reg_300(48 downto 16) <= sext_ln1148_fu_157_p1(48 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_305_pp0_iter52_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln87_reg_314_pp0_iter52_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sdiv_ln1148_reg_323 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    max_V_reg_285(15 downto 0) <= "0000000000000000";
    min_V_reg_290(15 downto 0) <= "0000000000000000";
    rhs_V_reg_295(15 downto 0) <= "0000000000000000";
    sext_ln1148_reg_300(15 downto 0) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, min_value_empty_n, max_value_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter55, icmp_ln887_fu_161_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter54)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_161_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter55 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter55 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_161_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    I_data_stream_V_blk_n_assign_proc : process(I_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter55, icmp_ln887_reg_305_pp0_iter54_reg)
    begin
        if (((icmp_ln887_reg_305_pp0_iter54_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_1))) then 
            I_data_stream_V_blk_n <= I_data_stream_V_full_n;
        else 
            I_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    I_data_stream_V_din <= 
        select_ln851_fu_268_p3 when (p_Result_s_fu_244_p3(0) = '1') else 
        ret_V_fu_234_p4;

    I_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter55, icmp_ln887_reg_305_pp0_iter54_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln887_reg_305_pp0_iter54_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            I_data_stream_V_write <= ap_const_logic_1;
        else 
            I_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    M_data_stream_V_blk_n_assign_proc : process(M_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln887_reg_305)
    begin
        if (((icmp_ln887_reg_305 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_data_stream_V_blk_n <= M_data_stream_V_empty_n;
        else 
            M_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    M_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln887_reg_305, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln887_reg_305 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_data_stream_V_read <= ap_const_logic_1;
        else 
            M_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln887_fu_167_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_105) + unsigned(ap_const_lv17_1));
    and_ln87_fu_197_p2 <= (xor_ln87_fu_186_p2 and icmp_ln1495_fu_192_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state58 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(M_data_stream_V_empty_n, I_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln887_reg_305, ap_enable_reg_pp0_iter55, icmp_ln887_reg_305_pp0_iter54_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln887_reg_305_pp0_iter54_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_data_stream_V_full_n) and (ap_enable_reg_pp0_iter55 = ap_const_logic_1)) or ((icmp_ln887_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = M_data_stream_V_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(M_data_stream_V_empty_n, I_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln887_reg_305, ap_enable_reg_pp0_iter55, icmp_ln887_reg_305_pp0_iter54_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln887_reg_305_pp0_iter54_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_data_stream_V_full_n) and (ap_enable_reg_pp0_iter55 = ap_const_logic_1)) or ((icmp_ln887_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = M_data_stream_V_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(M_data_stream_V_empty_n, I_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln887_reg_305, ap_enable_reg_pp0_iter55, icmp_ln887_reg_305_pp0_iter54_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln887_reg_305_pp0_iter54_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_data_stream_V_full_n) and (ap_enable_reg_pp0_iter55 = ap_const_logic_1)) or ((icmp_ln887_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = M_data_stream_V_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, min_value_empty_n, max_value_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(M_data_stream_V_empty_n, icmp_ln887_reg_305)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln887_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = M_data_stream_V_empty_n));
    end process;

        ap_block_state40_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state57_pp0_stage0_iter55_assign_proc : process(I_data_stream_V_full_n, icmp_ln887_reg_305_pp0_iter54_reg)
    begin
                ap_block_state57_pp0_stage0_iter55 <= ((icmp_ln887_reg_305_pp0_iter54_reg = ap_const_lv1_0) and (ap_const_logic_0 = I_data_stream_V_full_n));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_431_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_431 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_161_p2)
    begin
        if ((icmp_ln887_fu_161_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54)
    begin
        if (((ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_i_V_3_reg_116 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_220_p0 <= (ret_V_8_fu_207_p2 & ap_const_lv16_0);
    grp_fu_220_p1 <= sext_ln1148_reg_300(33 - 1 downto 0);
    i_V_fu_225_p1 <= sdiv_ln1148_reg_323(32 - 1 downto 0);
    icmp_ln1495_fu_192_p2 <= "1" when (signed(p_Val2_11_fu_173_p3) < signed(max_V_reg_285)) else "0";
    icmp_ln851_fu_256_p2 <= "1" when (trunc_ln851_fu_252_p1 = ap_const_lv16_0) else "0";
    icmp_ln87_fu_181_p2 <= "1" when (signed(p_Val2_11_fu_173_p3) < signed(min_V_reg_290)) else "0";
    icmp_ln887_fu_161_p2 <= "1" when (indvar_flatten_reg_105 = ap_const_lv17_1FA40) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(max_V_fu_127_p3),33));

        lhs_V_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_fu_173_p3),33));

    max_V_fu_127_p3 <= (max_value_dout & ap_const_lv16_0);

    max_value_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, max_value_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_value_blk_n <= max_value_empty_n;
        else 
            max_value_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_value_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, min_value_empty_n, max_value_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_value_read <= ap_const_logic_1;
        else 
            max_value_read <= ap_const_logic_0;
        end if; 
    end process;

    min_V_fu_135_p3 <= (min_value_dout & ap_const_lv16_0);

    min_value_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, min_value_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_value_blk_n <= min_value_empty_n;
        else 
            min_value_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    min_value_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, min_value_empty_n, max_value_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (max_value_empty_n = ap_const_logic_0) or (min_value_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_value_read <= ap_const_logic_1;
        else 
            min_value_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln88_fu_228_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_64) * signed(i_V_fu_225_p1))), 32));
    p_Result_s_fu_244_p3 <= ap_phi_reg_pp0_iter55_i_V_3_reg_116(31 downto 31);
    p_Val2_11_fu_173_p3 <= (M_data_stream_V_dout & ap_const_lv16_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_6_fu_151_p2 <= std_logic_vector(signed(lhs_V_1_fu_147_p1) - signed(rhs_V_fu_143_p1));
    ret_V_7_fu_262_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ret_V_fu_234_p4));
    ret_V_8_fu_207_p2 <= std_logic_vector(signed(lhs_V_fu_203_p1) - signed(rhs_V_reg_295));
    ret_V_fu_234_p4 <= ap_phi_reg_pp0_iter55_i_V_3_reg_116(31 downto 16);
        rhs_V_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(min_V_fu_135_p3),33));

    select_ln851_fu_268_p3 <= 
        ret_V_fu_234_p4 when (icmp_ln851_fu_256_p2(0) = '1') else 
        ret_V_7_fu_262_p2;
        sext_ln1148_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_6_fu_151_p2),49));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln851_fu_252_p1 <= ap_phi_reg_pp0_iter55_i_V_3_reg_116(16 - 1 downto 0);
    xor_ln87_fu_186_p2 <= (icmp_ln87_fu_181_p2 xor ap_const_lv1_1);
end behav;
