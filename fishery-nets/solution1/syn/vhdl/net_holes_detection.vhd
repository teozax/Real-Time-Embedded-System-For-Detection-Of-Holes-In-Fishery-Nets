-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity net_holes_detection is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC );
end;


architecture behav of net_holes_detection is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "net_holes_detection,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.372281,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=1110,HLS_SYN_DSP=32,HLS_SYN_FF=144330,HLS_SYN_LUT=175303,HLS_VERSION=2019_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_start_full_n : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_start_out : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_start_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_I_enhanced_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_I_enhanced_rows_V_out_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_I_enhanced_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_I_enhanced_cols_V_out_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_img_2_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_img_2_rows_V_out_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_img_2_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_img_2_cols_V_out_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_img_3_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_img_3_rows_V_out_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_img_3_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_img_3_cols_V_out_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_img_4_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_img_4_rows_V_out_write : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_img_4_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_codeRepl7833_p_U0_img_4_cols_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal ex_enhancement_U0_inputImage_data_stream_0_V_read : STD_LOGIC;
    signal ex_enhancement_U0_inputImage_data_stream_1_V_read : STD_LOGIC;
    signal ex_enhancement_U0_inputImage_data_stream_2_V_read : STD_LOGIC;
    signal ex_enhancement_U0_I_enhanced_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ex_enhancement_U0_I_enhanced_data_stream_V_write : STD_LOGIC;
    signal ex_enhancement_U0_ap_start : STD_LOGIC;
    signal ex_enhancement_U0_ap_done : STD_LOGIC;
    signal ex_enhancement_U0_ap_ready : STD_LOGIC;
    signal ex_enhancement_U0_ap_idle : STD_LOGIC;
    signal ex_enhancement_U0_ap_continue : STD_LOGIC;
    signal Duplicate266_U0_ap_start : STD_LOGIC;
    signal Duplicate266_U0_ap_done : STD_LOGIC;
    signal Duplicate266_U0_ap_continue : STD_LOGIC;
    signal Duplicate266_U0_ap_idle : STD_LOGIC;
    signal Duplicate266_U0_ap_ready : STD_LOGIC;
    signal Duplicate266_U0_start_out : STD_LOGIC;
    signal Duplicate266_U0_start_write : STD_LOGIC;
    signal Duplicate266_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate266_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate266_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate266_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate266_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate266_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate266_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Loop_loop_height_pro_U0_ap_start : STD_LOGIC;
    signal Loop_loop_height_pro_U0_ap_done : STD_LOGIC;
    signal Loop_loop_height_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_loop_height_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_loop_height_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_loop_height_pro_U0_start_out : STD_LOGIC;
    signal Loop_loop_height_pro_U0_start_write : STD_LOGIC;
    signal Loop_loop_height_pro_U0_I_enh1_data_stream_0_V_read : STD_LOGIC;
    signal Loop_loop_height_pro_U0_img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_loop_height_pro_U0_img_1_data_stream_0_V_write : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_ap_start : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_ap_done : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_ap_continue : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_ap_idle : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_ap_ready : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_img_1_data_stream_0_V_read : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_Background_data_stream_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_loop_height_pro_1_U0_Background_data_stream_0_V_write : STD_LOGIC;
    signal AddWeighted_U0_ap_start : STD_LOGIC;
    signal AddWeighted_U0_ap_done : STD_LOGIC;
    signal AddWeighted_U0_ap_continue : STD_LOGIC;
    signal AddWeighted_U0_ap_idle : STD_LOGIC;
    signal AddWeighted_U0_ap_ready : STD_LOGIC;
    signal AddWeighted_U0_start_out : STD_LOGIC;
    signal AddWeighted_U0_start_write : STD_LOGIC;
    signal AddWeighted_U0_src1_data_stream_V_read : STD_LOGIC;
    signal AddWeighted_U0_src2_data_stream_V_read : STD_LOGIC;
    signal AddWeighted_U0_dst_rows_V_read : STD_LOGIC;
    signal AddWeighted_U0_dst_cols_V_read : STD_LOGIC;
    signal AddWeighted_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AddWeighted_U0_dst_data_stream_V_write : STD_LOGIC;
    signal AddWeighted_U0_dst_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal AddWeighted_U0_dst_rows_V_out_write : STD_LOGIC;
    signal AddWeighted_U0_dst_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal AddWeighted_U0_dst_cols_V_out_write : STD_LOGIC;
    signal Duplicate269_U0_ap_start : STD_LOGIC;
    signal Duplicate269_U0_ap_done : STD_LOGIC;
    signal Duplicate269_U0_ap_continue : STD_LOGIC;
    signal Duplicate269_U0_ap_idle : STD_LOGIC;
    signal Duplicate269_U0_ap_ready : STD_LOGIC;
    signal Duplicate269_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate269_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate269_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate269_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate269_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate269_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate269_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Duplicate270_U0_ap_start : STD_LOGIC;
    signal Duplicate270_U0_start_full_n : STD_LOGIC;
    signal Duplicate270_U0_ap_done : STD_LOGIC;
    signal Duplicate270_U0_ap_continue : STD_LOGIC;
    signal Duplicate270_U0_ap_idle : STD_LOGIC;
    signal Duplicate270_U0_ap_ready : STD_LOGIC;
    signal Duplicate270_U0_start_out : STD_LOGIC;
    signal Duplicate270_U0_start_write : STD_LOGIC;
    signal Duplicate270_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate270_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate270_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate270_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate270_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate270_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate270_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_start_full_n : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_start_out : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_src_rows_V_read : STD_LOGIC;
    signal Duplicate_U0_src_cols_V_read : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Duplicate_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal MinMaxLoc_U0_ap_start : STD_LOGIC;
    signal MinMaxLoc_U0_ap_done : STD_LOGIC;
    signal MinMaxLoc_U0_ap_continue : STD_LOGIC;
    signal MinMaxLoc_U0_ap_idle : STD_LOGIC;
    signal MinMaxLoc_U0_ap_ready : STD_LOGIC;
    signal MinMaxLoc_U0_src_data_stream_V_read : STD_LOGIC;
    signal MinMaxLoc_U0_min_val_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal MinMaxLoc_U0_min_val_out_write : STD_LOGIC;
    signal MinMaxLoc_U0_max_val_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal MinMaxLoc_U0_max_val_out_write : STD_LOGIC;
    signal mat2gray_U0_ap_start : STD_LOGIC;
    signal mat2gray_U0_ap_done : STD_LOGIC;
    signal mat2gray_U0_ap_continue : STD_LOGIC;
    signal mat2gray_U0_ap_idle : STD_LOGIC;
    signal mat2gray_U0_ap_ready : STD_LOGIC;
    signal mat2gray_U0_start_out : STD_LOGIC;
    signal mat2gray_U0_start_write : STD_LOGIC;
    signal mat2gray_U0_M_data_stream_V_read : STD_LOGIC;
    signal mat2gray_U0_I_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal mat2gray_U0_I_data_stream_V_write : STD_LOGIC;
    signal mat2gray_U0_min_value_read : STD_LOGIC;
    signal mat2gray_U0_max_value_read : STD_LOGIC;
    signal mean_filter_2D_U0_ap_start : STD_LOGIC;
    signal mean_filter_2D_U0_ap_done : STD_LOGIC;
    signal mean_filter_2D_U0_ap_continue : STD_LOGIC;
    signal mean_filter_2D_U0_ap_idle : STD_LOGIC;
    signal mean_filter_2D_U0_ap_ready : STD_LOGIC;
    signal mean_filter_2D_U0_img_in_data_stream_V_read : STD_LOGIC;
    signal mean_filter_2D_U0_img_out_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal mean_filter_2D_U0_img_out_data_stream_V_write : STD_LOGIC;
    signal adaptive_threshold_U0_ap_start : STD_LOGIC;
    signal adaptive_threshold_U0_ap_done : STD_LOGIC;
    signal adaptive_threshold_U0_ap_continue : STD_LOGIC;
    signal adaptive_threshold_U0_ap_idle : STD_LOGIC;
    signal adaptive_threshold_U0_ap_ready : STD_LOGIC;
    signal adaptive_threshold_U0_start_out : STD_LOGIC;
    signal adaptive_threshold_U0_start_write : STD_LOGIC;
    signal adaptive_threshold_U0_IN_data_stream_V_read : STD_LOGIC;
    signal adaptive_threshold_U0_IN1_data_stream_V_read : STD_LOGIC;
    signal adaptive_threshold_U0_help_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal adaptive_threshold_U0_help_V_V_write : STD_LOGIC;
    signal threshold_U0_ap_start : STD_LOGIC;
    signal threshold_U0_ap_done : STD_LOGIC;
    signal threshold_U0_ap_continue : STD_LOGIC;
    signal threshold_U0_ap_idle : STD_LOGIC;
    signal threshold_U0_ap_ready : STD_LOGIC;
    signal threshold_U0_start_out : STD_LOGIC;
    signal threshold_U0_start_write : STD_LOGIC;
    signal threshold_U0_IN_data_stream_V_read : STD_LOGIC;
    signal threshold_U0_Luminance_img_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_U0_Luminance_img_V_V_write : STD_LOGIC;
    signal ccl_U0_ap_start : STD_LOGIC;
    signal ccl_U0_ap_done : STD_LOGIC;
    signal ccl_U0_ap_continue : STD_LOGIC;
    signal ccl_U0_ap_idle : STD_LOGIC;
    signal ccl_U0_ap_ready : STD_LOGIC;
    signal ccl_U0_Luminance_img_V_V_read : STD_LOGIC;
    signal ccl_U0_LI_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ccl_U0_LI_V_V_write : STD_LOGIC;
    signal AXIstream2Mat_U0_ap_start : STD_LOGIC;
    signal AXIstream2Mat_U0_ap_done : STD_LOGIC;
    signal AXIstream2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIstream2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIstream2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIstream2Mat_U0_start_out : STD_LOGIC;
    signal AXIstream2Mat_U0_start_write : STD_LOGIC;
    signal AXIstream2Mat_U0_my_image_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIstream2Mat_U0_my_image_data_stream_0_V_write : STD_LOGIC;
    signal AXIstream2Mat_U0_my_image_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIstream2Mat_U0_my_image_data_stream_1_V_write : STD_LOGIC;
    signal AXIstream2Mat_U0_my_image_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIstream2Mat_U0_my_image_data_stream_2_V_write : STD_LOGIC;
    signal AXIstream2Mat_U0_LI_V_V_read : STD_LOGIC;
    signal AXIstream2Mat_U0_help_V_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal I_enhanced_rows_V_c_full_n : STD_LOGIC;
    signal I_enhanced_rows_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal I_enhanced_rows_V_c_empty_n : STD_LOGIC;
    signal I_enhanced_cols_V_c_full_n : STD_LOGIC;
    signal I_enhanced_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal I_enhanced_cols_V_c_empty_n : STD_LOGIC;
    signal img_2_rows_V_c_full_n : STD_LOGIC;
    signal img_2_rows_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_2_rows_V_c_empty_n : STD_LOGIC;
    signal img_2_cols_V_c_full_n : STD_LOGIC;
    signal img_2_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_2_cols_V_c_empty_n : STD_LOGIC;
    signal img_3_rows_V_c_full_n : STD_LOGIC;
    signal img_3_rows_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_3_rows_V_c_empty_n : STD_LOGIC;
    signal img_3_cols_V_c_full_n : STD_LOGIC;
    signal img_3_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_3_cols_V_c_empty_n : STD_LOGIC;
    signal img_4_rows_V_c_full_n : STD_LOGIC;
    signal img_4_rows_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_4_rows_V_c_empty_n : STD_LOGIC;
    signal img_4_cols_V_c_full_n : STD_LOGIC;
    signal img_4_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_4_cols_V_c_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal I_enhanced_data_stre_full_n : STD_LOGIC;
    signal I_enhanced_data_stre_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal I_enhanced_data_stre_empty_n : STD_LOGIC;
    signal I_enh1_data_stream_0_full_n : STD_LOGIC;
    signal I_enh1_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal I_enh1_data_stream_0_empty_n : STD_LOGIC;
    signal I_enh2_data_stream_0_full_n : STD_LOGIC;
    signal I_enh2_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal I_enh2_data_stream_0_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal Background_data_stre_full_n : STD_LOGIC;
    signal Background_data_stre_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal Background_data_stre_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_full_n : STD_LOGIC;
    signal img_2_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_2_data_stream_0_empty_n : STD_LOGIC;
    signal img_2_rows_V_c7940_full_n : STD_LOGIC;
    signal img_2_rows_V_c7940_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_2_rows_V_c7940_empty_n : STD_LOGIC;
    signal img_2_cols_V_c7941_full_n : STD_LOGIC;
    signal img_2_cols_V_c7941_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_2_cols_V_c7941_empty_n : STD_LOGIC;
    signal img_3_data_stream_0_full_n : STD_LOGIC;
    signal img_3_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_3_data_stream_0_empty_n : STD_LOGIC;
    signal img_4_data_stream_0_full_n : STD_LOGIC;
    signal img_4_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_4_data_stream_0_empty_n : STD_LOGIC;
    signal img_8_data_stream_0_full_n : STD_LOGIC;
    signal img_8_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_8_data_stream_0_empty_n : STD_LOGIC;
    signal img_9_data_stream_0_full_n : STD_LOGIC;
    signal img_9_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_9_data_stream_0_empty_n : STD_LOGIC;
    signal img_10_data_stream_0_full_n : STD_LOGIC;
    signal img_10_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_10_data_stream_0_empty_n : STD_LOGIC;
    signal img_11_data_stream_0_full_n : STD_LOGIC;
    signal img_11_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_11_data_stream_0_empty_n : STD_LOGIC;
    signal min_value_c_full_n : STD_LOGIC;
    signal min_value_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal min_value_c_empty_n : STD_LOGIC;
    signal max_value_c_full_n : STD_LOGIC;
    signal max_value_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal max_value_c_empty_n : STD_LOGIC;
    signal img_5_data_stream_0_full_n : STD_LOGIC;
    signal img_5_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_5_data_stream_0_empty_n : STD_LOGIC;
    signal img_6_data_stream_0_full_n : STD_LOGIC;
    signal img_6_data_stream_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_6_data_stream_0_empty_n : STD_LOGIC;
    signal help_V_V_full_n : STD_LOGIC;
    signal help_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal help_V_V_empty_n : STD_LOGIC;
    signal Luminance_img_V_V_full_n : STD_LOGIC;
    signal Luminance_img_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Luminance_img_V_V_empty_n : STD_LOGIC;
    signal LI_V_V_full_n : STD_LOGIC;
    signal LI_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal LI_V_V_empty_n : STD_LOGIC;
    signal img_12_data_stream_0_full_n : STD_LOGIC;
    signal img_12_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_12_data_stream_0_empty_n : STD_LOGIC;
    signal img_12_data_stream_1_full_n : STD_LOGIC;
    signal img_12_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_12_data_stream_1_empty_n : STD_LOGIC;
    signal img_12_data_stream_2_full_n : STD_LOGIC;
    signal img_12_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_12_data_stream_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_codeRepl7833_p_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_codeRepl7833_p_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl7833_p_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Duplicate266_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate266_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate266_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate266_U0_empty_n : STD_LOGIC;
    signal start_for_AddWeighted_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AddWeighted_U0_full_n : STD_LOGIC;
    signal start_for_AddWeighted_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AddWeighted_U0_empty_n : STD_LOGIC;
    signal start_for_Duplicate270_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate270_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate270_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate270_U0_empty_n : STD_LOGIC;
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_ex_enhancement_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ex_enhancement_U0_full_n : STD_LOGIC;
    signal start_for_ex_enhancement_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ex_enhancement_U0_empty_n : STD_LOGIC;
    signal ex_enhancement_U0_start_full_n : STD_LOGIC;
    signal ex_enhancement_U0_start_write : STD_LOGIC;
    signal start_for_Loop_loop_height_pro_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_loop_height_pro_U0_full_n : STD_LOGIC;
    signal start_for_Loop_loop_height_pro_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_loop_height_pro_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_loop_height_pro_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_loop_height_pro_1_U0_full_n : STD_LOGIC;
    signal start_for_Loop_loop_height_pro_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_loop_height_pro_1_U0_empty_n : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_start_full_n : STD_LOGIC;
    signal Loop_loop_height_pro_1_U0_start_write : STD_LOGIC;
    signal start_for_Duplicate269_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate269_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate269_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate269_U0_empty_n : STD_LOGIC;
    signal Duplicate269_U0_start_full_n : STD_LOGIC;
    signal Duplicate269_U0_start_write : STD_LOGIC;
    signal start_for_mat2gray_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mat2gray_U0_full_n : STD_LOGIC;
    signal start_for_mat2gray_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mat2gray_U0_empty_n : STD_LOGIC;
    signal start_for_adaptive_threshold_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_adaptive_threshold_U0_full_n : STD_LOGIC;
    signal start_for_adaptive_threshold_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_adaptive_threshold_U0_empty_n : STD_LOGIC;
    signal start_for_MinMaxLoc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MinMaxLoc_U0_full_n : STD_LOGIC;
    signal start_for_MinMaxLoc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MinMaxLoc_U0_empty_n : STD_LOGIC;
    signal start_for_threshold_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_threshold_U0_full_n : STD_LOGIC;
    signal start_for_threshold_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_threshold_U0_empty_n : STD_LOGIC;
    signal MinMaxLoc_U0_start_full_n : STD_LOGIC;
    signal MinMaxLoc_U0_start_write : STD_LOGIC;
    signal start_for_mean_filter_2D_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mean_filter_2D_U0_full_n : STD_LOGIC;
    signal start_for_mean_filter_2D_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mean_filter_2D_U0_empty_n : STD_LOGIC;
    signal mean_filter_2D_U0_start_full_n : STD_LOGIC;
    signal mean_filter_2D_U0_start_write : STD_LOGIC;
    signal start_for_AXIstream2Mat_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXIstream2Mat_U0_full_n : STD_LOGIC;
    signal start_for_AXIstream2Mat_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXIstream2Mat_U0_empty_n : STD_LOGIC;
    signal start_for_ccl_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ccl_U0_full_n : STD_LOGIC;
    signal start_for_ccl_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ccl_U0_empty_n : STD_LOGIC;
    signal ccl_U0_start_full_n : STD_LOGIC;
    signal ccl_U0_start_write : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_codeRepl7833_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        I_enhanced_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_enhanced_rows_V_out_full_n : IN STD_LOGIC;
        I_enhanced_rows_V_out_write : OUT STD_LOGIC;
        I_enhanced_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_enhanced_cols_V_out_full_n : IN STD_LOGIC;
        I_enhanced_cols_V_out_write : OUT STD_LOGIC;
        img_2_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_2_rows_V_out_full_n : IN STD_LOGIC;
        img_2_rows_V_out_write : OUT STD_LOGIC;
        img_2_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_2_cols_V_out_full_n : IN STD_LOGIC;
        img_2_cols_V_out_write : OUT STD_LOGIC;
        img_3_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_3_rows_V_out_full_n : IN STD_LOGIC;
        img_3_rows_V_out_write : OUT STD_LOGIC;
        img_3_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_3_cols_V_out_full_n : IN STD_LOGIC;
        img_3_cols_V_out_write : OUT STD_LOGIC;
        img_4_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_4_rows_V_out_full_n : IN STD_LOGIC;
        img_4_rows_V_out_write : OUT STD_LOGIC;
        img_4_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_4_cols_V_out_full_n : IN STD_LOGIC;
        img_4_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component ex_enhancement IS
    port (
        inputImage_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputImage_data_stream_0_V_empty_n : IN STD_LOGIC;
        inputImage_data_stream_0_V_read : OUT STD_LOGIC;
        inputImage_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputImage_data_stream_1_V_empty_n : IN STD_LOGIC;
        inputImage_data_stream_1_V_read : OUT STD_LOGIC;
        inputImage_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputImage_data_stream_2_V_empty_n : IN STD_LOGIC;
        inputImage_data_stream_2_V_read : OUT STD_LOGIC;
        I_enhanced_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_enhanced_data_stream_V_full_n : IN STD_LOGIC;
        I_enhanced_data_stream_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Duplicate266 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Loop_loop_height_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        I_enh1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        I_enh1_data_stream_0_V_empty_n : IN STD_LOGIC;
        I_enh1_data_stream_0_V_read : OUT STD_LOGIC;
        img_1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_1_data_stream_0_V_full_n : IN STD_LOGIC;
        img_1_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component Loop_loop_height_pro_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_1_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_1_data_stream_0_V_read : OUT STD_LOGIC;
        Background_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        Background_data_stream_0_V_full_n : IN STD_LOGIC;
        Background_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component AddWeighted IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src1_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src1_data_stream_V_empty_n : IN STD_LOGIC;
        src1_data_stream_V_read : OUT STD_LOGIC;
        src2_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src2_data_stream_V_empty_n : IN STD_LOGIC;
        src2_data_stream_V_read : OUT STD_LOGIC;
        dst_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        dst_rows_V_empty_n : IN STD_LOGIC;
        dst_rows_V_read : OUT STD_LOGIC;
        dst_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        dst_cols_V_empty_n : IN STD_LOGIC;
        dst_cols_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        dst_rows_V_out_full_n : IN STD_LOGIC;
        dst_rows_V_out_write : OUT STD_LOGIC;
        dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        dst_cols_V_out_full_n : IN STD_LOGIC;
        dst_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Duplicate269 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate270 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component MinMaxLoc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        min_val_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        min_val_out_full_n : IN STD_LOGIC;
        min_val_out_write : OUT STD_LOGIC;
        max_val_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        max_val_out_full_n : IN STD_LOGIC;
        max_val_out_write : OUT STD_LOGIC );
    end component;


    component mat2gray IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        M_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        M_data_stream_V_empty_n : IN STD_LOGIC;
        M_data_stream_V_read : OUT STD_LOGIC;
        I_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_data_stream_V_full_n : IN STD_LOGIC;
        I_data_stream_V_write : OUT STD_LOGIC;
        min_value_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        min_value_empty_n : IN STD_LOGIC;
        min_value_read : OUT STD_LOGIC;
        max_value_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        max_value_empty_n : IN STD_LOGIC;
        max_value_read : OUT STD_LOGIC );
    end component;


    component mean_filter_2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_in_data_stream_V_empty_n : IN STD_LOGIC;
        img_in_data_stream_V_read : OUT STD_LOGIC;
        img_out_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_out_data_stream_V_full_n : IN STD_LOGIC;
        img_out_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component adaptive_threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        IN_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        IN_data_stream_V_empty_n : IN STD_LOGIC;
        IN_data_stream_V_read : OUT STD_LOGIC;
        IN1_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        IN1_data_stream_V_empty_n : IN STD_LOGIC;
        IN1_data_stream_V_read : OUT STD_LOGIC;
        help_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        help_V_V_full_n : IN STD_LOGIC;
        help_V_V_write : OUT STD_LOGIC );
    end component;


    component threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        IN_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        IN_data_stream_V_empty_n : IN STD_LOGIC;
        IN_data_stream_V_read : OUT STD_LOGIC;
        Luminance_img_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Luminance_img_V_V_full_n : IN STD_LOGIC;
        Luminance_img_V_V_write : OUT STD_LOGIC );
    end component;


    component ccl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Luminance_img_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Luminance_img_V_V_empty_n : IN STD_LOGIC;
        Luminance_img_V_V_read : OUT STD_LOGIC;
        LI_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        LI_V_V_full_n : IN STD_LOGIC;
        LI_V_V_write : OUT STD_LOGIC );
    end component;


    component AXIstream2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        my_image_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        my_image_data_stream_0_V_full_n : IN STD_LOGIC;
        my_image_data_stream_0_V_write : OUT STD_LOGIC;
        my_image_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        my_image_data_stream_1_V_full_n : IN STD_LOGIC;
        my_image_data_stream_1_V_write : OUT STD_LOGIC;
        my_image_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        my_image_data_stream_2_V_full_n : IN STD_LOGIC;
        my_image_data_stream_2_V_write : OUT STD_LOGIC;
        LI_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        LI_V_V_empty_n : IN STD_LOGIC;
        LI_V_V_read : OUT STD_LOGIC;
        help_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        help_V_V_empty_n : IN STD_LOGIC;
        help_V_V_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w10_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicaduH IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_AddWeigdvH IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicadwH IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicadxH IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ex_enhadyH IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_lodzI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_lodAI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicadBI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_mat2gradCI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_adaptivdDI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_MinMaxLdEI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_threshodFJ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_mean_fidGJ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_AXIstredHJ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ccl_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIdIJ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component net_holes_detection_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    net_holes_detection_CONTROL_BUS_s_axi_U : component net_holes_detection_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Block_codeRepl7833_p_U0 : component Block_codeRepl7833_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_codeRepl7833_p_U0_ap_start,
        start_full_n => Block_codeRepl7833_p_U0_start_full_n,
        ap_done => Block_codeRepl7833_p_U0_ap_done,
        ap_continue => Block_codeRepl7833_p_U0_ap_continue,
        ap_idle => Block_codeRepl7833_p_U0_ap_idle,
        ap_ready => Block_codeRepl7833_p_U0_ap_ready,
        start_out => Block_codeRepl7833_p_U0_start_out,
        start_write => Block_codeRepl7833_p_U0_start_write,
        I_enhanced_rows_V_out_din => Block_codeRepl7833_p_U0_I_enhanced_rows_V_out_din,
        I_enhanced_rows_V_out_full_n => I_enhanced_rows_V_c_full_n,
        I_enhanced_rows_V_out_write => Block_codeRepl7833_p_U0_I_enhanced_rows_V_out_write,
        I_enhanced_cols_V_out_din => Block_codeRepl7833_p_U0_I_enhanced_cols_V_out_din,
        I_enhanced_cols_V_out_full_n => I_enhanced_cols_V_c_full_n,
        I_enhanced_cols_V_out_write => Block_codeRepl7833_p_U0_I_enhanced_cols_V_out_write,
        img_2_rows_V_out_din => Block_codeRepl7833_p_U0_img_2_rows_V_out_din,
        img_2_rows_V_out_full_n => img_2_rows_V_c_full_n,
        img_2_rows_V_out_write => Block_codeRepl7833_p_U0_img_2_rows_V_out_write,
        img_2_cols_V_out_din => Block_codeRepl7833_p_U0_img_2_cols_V_out_din,
        img_2_cols_V_out_full_n => img_2_cols_V_c_full_n,
        img_2_cols_V_out_write => Block_codeRepl7833_p_U0_img_2_cols_V_out_write,
        img_3_rows_V_out_din => Block_codeRepl7833_p_U0_img_3_rows_V_out_din,
        img_3_rows_V_out_full_n => img_3_rows_V_c_full_n,
        img_3_rows_V_out_write => Block_codeRepl7833_p_U0_img_3_rows_V_out_write,
        img_3_cols_V_out_din => Block_codeRepl7833_p_U0_img_3_cols_V_out_din,
        img_3_cols_V_out_full_n => img_3_cols_V_c_full_n,
        img_3_cols_V_out_write => Block_codeRepl7833_p_U0_img_3_cols_V_out_write,
        img_4_rows_V_out_din => Block_codeRepl7833_p_U0_img_4_rows_V_out_din,
        img_4_rows_V_out_full_n => img_4_rows_V_c_full_n,
        img_4_rows_V_out_write => Block_codeRepl7833_p_U0_img_4_rows_V_out_write,
        img_4_cols_V_out_din => Block_codeRepl7833_p_U0_img_4_cols_V_out_din,
        img_4_cols_V_out_full_n => img_4_cols_V_c_full_n,
        img_4_cols_V_out_write => Block_codeRepl7833_p_U0_img_4_cols_V_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_ex_enhancement_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => AXIvideo2Mat_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    ex_enhancement_U0 : component ex_enhancement
    port map (
        inputImage_data_stream_0_V_dout => img_0_data_stream_0_dout,
        inputImage_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        inputImage_data_stream_0_V_read => ex_enhancement_U0_inputImage_data_stream_0_V_read,
        inputImage_data_stream_1_V_dout => img_0_data_stream_1_dout,
        inputImage_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        inputImage_data_stream_1_V_read => ex_enhancement_U0_inputImage_data_stream_1_V_read,
        inputImage_data_stream_2_V_dout => img_0_data_stream_2_dout,
        inputImage_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        inputImage_data_stream_2_V_read => ex_enhancement_U0_inputImage_data_stream_2_V_read,
        I_enhanced_data_stream_V_din => ex_enhancement_U0_I_enhanced_data_stream_V_din,
        I_enhanced_data_stream_V_full_n => I_enhanced_data_stre_full_n,
        I_enhanced_data_stream_V_write => ex_enhancement_U0_I_enhanced_data_stream_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ex_enhancement_U0_ap_start,
        ap_done => ex_enhancement_U0_ap_done,
        ap_ready => ex_enhancement_U0_ap_ready,
        ap_idle => ex_enhancement_U0_ap_idle,
        ap_continue => ex_enhancement_U0_ap_continue);

    Duplicate266_U0 : component Duplicate266
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate266_U0_ap_start,
        start_full_n => start_for_Loop_loop_height_pro_U0_full_n,
        ap_done => Duplicate266_U0_ap_done,
        ap_continue => Duplicate266_U0_ap_continue,
        ap_idle => Duplicate266_U0_ap_idle,
        ap_ready => Duplicate266_U0_ap_ready,
        start_out => Duplicate266_U0_start_out,
        start_write => Duplicate266_U0_start_write,
        src_rows_V_dout => I_enhanced_rows_V_c_dout,
        src_rows_V_empty_n => I_enhanced_rows_V_c_empty_n,
        src_rows_V_read => Duplicate266_U0_src_rows_V_read,
        src_cols_V_dout => I_enhanced_cols_V_c_dout,
        src_cols_V_empty_n => I_enhanced_cols_V_c_empty_n,
        src_cols_V_read => Duplicate266_U0_src_cols_V_read,
        src_data_stream_V_dout => I_enhanced_data_stre_dout,
        src_data_stream_V_empty_n => I_enhanced_data_stre_empty_n,
        src_data_stream_V_read => Duplicate266_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate266_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => I_enh1_data_stream_0_full_n,
        dst1_data_stream_V_write => Duplicate266_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate266_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => I_enh2_data_stream_0_full_n,
        dst2_data_stream_V_write => Duplicate266_U0_dst2_data_stream_V_write);

    Loop_loop_height_pro_U0 : component Loop_loop_height_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_loop_height_pro_U0_ap_start,
        start_full_n => start_for_Loop_loop_height_pro_1_U0_full_n,
        ap_done => Loop_loop_height_pro_U0_ap_done,
        ap_continue => Loop_loop_height_pro_U0_ap_continue,
        ap_idle => Loop_loop_height_pro_U0_ap_idle,
        ap_ready => Loop_loop_height_pro_U0_ap_ready,
        start_out => Loop_loop_height_pro_U0_start_out,
        start_write => Loop_loop_height_pro_U0_start_write,
        I_enh1_data_stream_0_V_dout => I_enh1_data_stream_0_dout,
        I_enh1_data_stream_0_V_empty_n => I_enh1_data_stream_0_empty_n,
        I_enh1_data_stream_0_V_read => Loop_loop_height_pro_U0_I_enh1_data_stream_0_V_read,
        img_1_data_stream_0_V_din => Loop_loop_height_pro_U0_img_1_data_stream_0_V_din,
        img_1_data_stream_0_V_full_n => img_1_data_stream_0_full_n,
        img_1_data_stream_0_V_write => Loop_loop_height_pro_U0_img_1_data_stream_0_V_write);

    Loop_loop_height_pro_1_U0 : component Loop_loop_height_pro_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_loop_height_pro_1_U0_ap_start,
        ap_done => Loop_loop_height_pro_1_U0_ap_done,
        ap_continue => Loop_loop_height_pro_1_U0_ap_continue,
        ap_idle => Loop_loop_height_pro_1_U0_ap_idle,
        ap_ready => Loop_loop_height_pro_1_U0_ap_ready,
        img_1_data_stream_0_V_dout => img_1_data_stream_0_dout,
        img_1_data_stream_0_V_empty_n => img_1_data_stream_0_empty_n,
        img_1_data_stream_0_V_read => Loop_loop_height_pro_1_U0_img_1_data_stream_0_V_read,
        Background_data_stream_0_V_din => Loop_loop_height_pro_1_U0_Background_data_stream_0_V_din,
        Background_data_stream_0_V_full_n => Background_data_stre_full_n,
        Background_data_stream_0_V_write => Loop_loop_height_pro_1_U0_Background_data_stream_0_V_write);

    AddWeighted_U0 : component AddWeighted
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AddWeighted_U0_ap_start,
        start_full_n => start_for_Duplicate269_U0_full_n,
        ap_done => AddWeighted_U0_ap_done,
        ap_continue => AddWeighted_U0_ap_continue,
        ap_idle => AddWeighted_U0_ap_idle,
        ap_ready => AddWeighted_U0_ap_ready,
        start_out => AddWeighted_U0_start_out,
        start_write => AddWeighted_U0_start_write,
        src1_data_stream_V_dout => I_enh2_data_stream_0_dout,
        src1_data_stream_V_empty_n => I_enh2_data_stream_0_empty_n,
        src1_data_stream_V_read => AddWeighted_U0_src1_data_stream_V_read,
        src2_data_stream_V_dout => Background_data_stre_dout,
        src2_data_stream_V_empty_n => Background_data_stre_empty_n,
        src2_data_stream_V_read => AddWeighted_U0_src2_data_stream_V_read,
        dst_rows_V_dout => img_2_rows_V_c_dout,
        dst_rows_V_empty_n => img_2_rows_V_c_empty_n,
        dst_rows_V_read => AddWeighted_U0_dst_rows_V_read,
        dst_cols_V_dout => img_2_cols_V_c_dout,
        dst_cols_V_empty_n => img_2_cols_V_c_empty_n,
        dst_cols_V_read => AddWeighted_U0_dst_cols_V_read,
        dst_data_stream_V_din => AddWeighted_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_2_data_stream_0_full_n,
        dst_data_stream_V_write => AddWeighted_U0_dst_data_stream_V_write,
        dst_rows_V_out_din => AddWeighted_U0_dst_rows_V_out_din,
        dst_rows_V_out_full_n => img_2_rows_V_c7940_full_n,
        dst_rows_V_out_write => AddWeighted_U0_dst_rows_V_out_write,
        dst_cols_V_out_din => AddWeighted_U0_dst_cols_V_out_din,
        dst_cols_V_out_full_n => img_2_cols_V_c7941_full_n,
        dst_cols_V_out_write => AddWeighted_U0_dst_cols_V_out_write);

    Duplicate269_U0 : component Duplicate269
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate269_U0_ap_start,
        ap_done => Duplicate269_U0_ap_done,
        ap_continue => Duplicate269_U0_ap_continue,
        ap_idle => Duplicate269_U0_ap_idle,
        ap_ready => Duplicate269_U0_ap_ready,
        src_rows_V_dout => img_2_rows_V_c7940_dout,
        src_rows_V_empty_n => img_2_rows_V_c7940_empty_n,
        src_rows_V_read => Duplicate269_U0_src_rows_V_read,
        src_cols_V_dout => img_2_cols_V_c7941_dout,
        src_cols_V_empty_n => img_2_cols_V_c7941_empty_n,
        src_cols_V_read => Duplicate269_U0_src_cols_V_read,
        src_data_stream_V_dout => img_2_data_stream_0_dout,
        src_data_stream_V_empty_n => img_2_data_stream_0_empty_n,
        src_data_stream_V_read => Duplicate269_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate269_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => img_3_data_stream_0_full_n,
        dst1_data_stream_V_write => Duplicate269_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate269_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => img_4_data_stream_0_full_n,
        dst2_data_stream_V_write => Duplicate269_U0_dst2_data_stream_V_write);

    Duplicate270_U0 : component Duplicate270
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate270_U0_ap_start,
        start_full_n => Duplicate270_U0_start_full_n,
        ap_done => Duplicate270_U0_ap_done,
        ap_continue => Duplicate270_U0_ap_continue,
        ap_idle => Duplicate270_U0_ap_idle,
        ap_ready => Duplicate270_U0_ap_ready,
        start_out => Duplicate270_U0_start_out,
        start_write => Duplicate270_U0_start_write,
        src_rows_V_dout => img_3_rows_V_c_dout,
        src_rows_V_empty_n => img_3_rows_V_c_empty_n,
        src_rows_V_read => Duplicate270_U0_src_rows_V_read,
        src_cols_V_dout => img_3_cols_V_c_dout,
        src_cols_V_empty_n => img_3_cols_V_c_empty_n,
        src_cols_V_read => Duplicate270_U0_src_cols_V_read,
        src_data_stream_V_dout => img_3_data_stream_0_dout,
        src_data_stream_V_empty_n => img_3_data_stream_0_empty_n,
        src_data_stream_V_read => Duplicate270_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate270_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => img_8_data_stream_0_full_n,
        dst1_data_stream_V_write => Duplicate270_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate270_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => img_9_data_stream_0_full_n,
        dst2_data_stream_V_write => Duplicate270_U0_dst2_data_stream_V_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate_U0_ap_start,
        start_full_n => Duplicate_U0_start_full_n,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        start_out => Duplicate_U0_start_out,
        start_write => Duplicate_U0_start_write,
        src_rows_V_dout => img_4_rows_V_c_dout,
        src_rows_V_empty_n => img_4_rows_V_c_empty_n,
        src_rows_V_read => Duplicate_U0_src_rows_V_read,
        src_cols_V_dout => img_4_cols_V_c_dout,
        src_cols_V_empty_n => img_4_cols_V_c_empty_n,
        src_cols_V_read => Duplicate_U0_src_cols_V_read,
        src_data_stream_V_dout => img_4_data_stream_0_dout,
        src_data_stream_V_empty_n => img_4_data_stream_0_empty_n,
        src_data_stream_V_read => Duplicate_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => img_10_data_stream_0_full_n,
        dst1_data_stream_V_write => Duplicate_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => img_11_data_stream_0_full_n,
        dst2_data_stream_V_write => Duplicate_U0_dst2_data_stream_V_write);

    MinMaxLoc_U0 : component MinMaxLoc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => MinMaxLoc_U0_ap_start,
        ap_done => MinMaxLoc_U0_ap_done,
        ap_continue => MinMaxLoc_U0_ap_continue,
        ap_idle => MinMaxLoc_U0_ap_idle,
        ap_ready => MinMaxLoc_U0_ap_ready,
        src_data_stream_V_dout => img_10_data_stream_0_dout,
        src_data_stream_V_empty_n => img_10_data_stream_0_empty_n,
        src_data_stream_V_read => MinMaxLoc_U0_src_data_stream_V_read,
        min_val_out_din => MinMaxLoc_U0_min_val_out_din,
        min_val_out_full_n => min_value_c_full_n,
        min_val_out_write => MinMaxLoc_U0_min_val_out_write,
        max_val_out_din => MinMaxLoc_U0_max_val_out_din,
        max_val_out_full_n => max_value_c_full_n,
        max_val_out_write => MinMaxLoc_U0_max_val_out_write);

    mat2gray_U0 : component mat2gray
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mat2gray_U0_ap_start,
        start_full_n => start_for_mean_filter_2D_U0_full_n,
        ap_done => mat2gray_U0_ap_done,
        ap_continue => mat2gray_U0_ap_continue,
        ap_idle => mat2gray_U0_ap_idle,
        ap_ready => mat2gray_U0_ap_ready,
        start_out => mat2gray_U0_start_out,
        start_write => mat2gray_U0_start_write,
        M_data_stream_V_dout => img_8_data_stream_0_dout,
        M_data_stream_V_empty_n => img_8_data_stream_0_empty_n,
        M_data_stream_V_read => mat2gray_U0_M_data_stream_V_read,
        I_data_stream_V_din => mat2gray_U0_I_data_stream_V_din,
        I_data_stream_V_full_n => img_5_data_stream_0_full_n,
        I_data_stream_V_write => mat2gray_U0_I_data_stream_V_write,
        min_value_dout => min_value_c_dout,
        min_value_empty_n => min_value_c_empty_n,
        min_value_read => mat2gray_U0_min_value_read,
        max_value_dout => max_value_c_dout,
        max_value_empty_n => max_value_c_empty_n,
        max_value_read => mat2gray_U0_max_value_read);

    mean_filter_2D_U0 : component mean_filter_2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mean_filter_2D_U0_ap_start,
        ap_done => mean_filter_2D_U0_ap_done,
        ap_continue => mean_filter_2D_U0_ap_continue,
        ap_idle => mean_filter_2D_U0_ap_idle,
        ap_ready => mean_filter_2D_U0_ap_ready,
        img_in_data_stream_V_dout => img_5_data_stream_0_dout,
        img_in_data_stream_V_empty_n => img_5_data_stream_0_empty_n,
        img_in_data_stream_V_read => mean_filter_2D_U0_img_in_data_stream_V_read,
        img_out_data_stream_V_din => mean_filter_2D_U0_img_out_data_stream_V_din,
        img_out_data_stream_V_full_n => img_6_data_stream_0_full_n,
        img_out_data_stream_V_write => mean_filter_2D_U0_img_out_data_stream_V_write);

    adaptive_threshold_U0 : component adaptive_threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => adaptive_threshold_U0_ap_start,
        start_full_n => start_for_AXIstream2Mat_U0_full_n,
        ap_done => adaptive_threshold_U0_ap_done,
        ap_continue => adaptive_threshold_U0_ap_continue,
        ap_idle => adaptive_threshold_U0_ap_idle,
        ap_ready => adaptive_threshold_U0_ap_ready,
        start_out => adaptive_threshold_U0_start_out,
        start_write => adaptive_threshold_U0_start_write,
        IN_data_stream_V_dout => img_9_data_stream_0_dout,
        IN_data_stream_V_empty_n => img_9_data_stream_0_empty_n,
        IN_data_stream_V_read => adaptive_threshold_U0_IN_data_stream_V_read,
        IN1_data_stream_V_dout => img_6_data_stream_0_dout,
        IN1_data_stream_V_empty_n => img_6_data_stream_0_empty_n,
        IN1_data_stream_V_read => adaptive_threshold_U0_IN1_data_stream_V_read,
        help_V_V_din => adaptive_threshold_U0_help_V_V_din,
        help_V_V_full_n => help_V_V_full_n,
        help_V_V_write => adaptive_threshold_U0_help_V_V_write);

    threshold_U0 : component threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => threshold_U0_ap_start,
        start_full_n => start_for_ccl_U0_full_n,
        ap_done => threshold_U0_ap_done,
        ap_continue => threshold_U0_ap_continue,
        ap_idle => threshold_U0_ap_idle,
        ap_ready => threshold_U0_ap_ready,
        start_out => threshold_U0_start_out,
        start_write => threshold_U0_start_write,
        IN_data_stream_V_dout => img_11_data_stream_0_dout,
        IN_data_stream_V_empty_n => img_11_data_stream_0_empty_n,
        IN_data_stream_V_read => threshold_U0_IN_data_stream_V_read,
        Luminance_img_V_V_din => threshold_U0_Luminance_img_V_V_din,
        Luminance_img_V_V_full_n => Luminance_img_V_V_full_n,
        Luminance_img_V_V_write => threshold_U0_Luminance_img_V_V_write);

    ccl_U0 : component ccl
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ccl_U0_ap_start,
        ap_done => ccl_U0_ap_done,
        ap_continue => ccl_U0_ap_continue,
        ap_idle => ccl_U0_ap_idle,
        ap_ready => ccl_U0_ap_ready,
        Luminance_img_V_V_dout => Luminance_img_V_V_dout,
        Luminance_img_V_V_empty_n => Luminance_img_V_V_empty_n,
        Luminance_img_V_V_read => ccl_U0_Luminance_img_V_V_read,
        LI_V_V_din => ccl_U0_LI_V_V_din,
        LI_V_V_full_n => LI_V_V_full_n,
        LI_V_V_write => ccl_U0_LI_V_V_write);

    AXIstream2Mat_U0 : component AXIstream2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIstream2Mat_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => AXIstream2Mat_U0_ap_done,
        ap_continue => AXIstream2Mat_U0_ap_continue,
        ap_idle => AXIstream2Mat_U0_ap_idle,
        ap_ready => AXIstream2Mat_U0_ap_ready,
        start_out => AXIstream2Mat_U0_start_out,
        start_write => AXIstream2Mat_U0_start_write,
        my_image_data_stream_0_V_din => AXIstream2Mat_U0_my_image_data_stream_0_V_din,
        my_image_data_stream_0_V_full_n => img_12_data_stream_0_full_n,
        my_image_data_stream_0_V_write => AXIstream2Mat_U0_my_image_data_stream_0_V_write,
        my_image_data_stream_1_V_din => AXIstream2Mat_U0_my_image_data_stream_1_V_din,
        my_image_data_stream_1_V_full_n => img_12_data_stream_1_full_n,
        my_image_data_stream_1_V_write => AXIstream2Mat_U0_my_image_data_stream_1_V_write,
        my_image_data_stream_2_V_din => AXIstream2Mat_U0_my_image_data_stream_2_V_din,
        my_image_data_stream_2_V_full_n => img_12_data_stream_2_full_n,
        my_image_data_stream_2_V_write => AXIstream2Mat_U0_my_image_data_stream_2_V_write,
        LI_V_V_dout => LI_V_V_dout,
        LI_V_V_empty_n => LI_V_V_empty_n,
        LI_V_V_read => AXIstream2Mat_U0_LI_V_V_read,
        help_V_V_dout => help_V_V_dout,
        help_V_V_empty_n => help_V_V_empty_n,
        help_V_V_read => AXIstream2Mat_U0_help_V_V_read);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => img_12_data_stream_0_dout,
        img_data_stream_0_V_empty_n => img_12_data_stream_0_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_12_data_stream_1_dout,
        img_data_stream_1_V_empty_n => img_12_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_12_data_stream_2_dout,
        img_data_stream_2_V_empty_n => img_12_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA => Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => Mat2AXIvideo_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST);

    I_enhanced_rows_V_c_U : component fifo_w10_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_I_enhanced_rows_V_out_din,
        if_full_n => I_enhanced_rows_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_I_enhanced_rows_V_out_write,
        if_dout => I_enhanced_rows_V_c_dout,
        if_empty_n => I_enhanced_rows_V_c_empty_n,
        if_read => Duplicate266_U0_src_rows_V_read);

    I_enhanced_cols_V_c_U : component fifo_w10_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_I_enhanced_cols_V_out_din,
        if_full_n => I_enhanced_cols_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_I_enhanced_cols_V_out_write,
        if_dout => I_enhanced_cols_V_c_dout,
        if_empty_n => I_enhanced_cols_V_c_empty_n,
        if_read => Duplicate266_U0_src_cols_V_read);

    img_2_rows_V_c_U : component fifo_w10_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_img_2_rows_V_out_din,
        if_full_n => img_2_rows_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_img_2_rows_V_out_write,
        if_dout => img_2_rows_V_c_dout,
        if_empty_n => img_2_rows_V_c_empty_n,
        if_read => AddWeighted_U0_dst_rows_V_read);

    img_2_cols_V_c_U : component fifo_w10_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_img_2_cols_V_out_din,
        if_full_n => img_2_cols_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_img_2_cols_V_out_write,
        if_dout => img_2_cols_V_c_dout,
        if_empty_n => img_2_cols_V_c_empty_n,
        if_read => AddWeighted_U0_dst_cols_V_read);

    img_3_rows_V_c_U : component fifo_w10_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_img_3_rows_V_out_din,
        if_full_n => img_3_rows_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_img_3_rows_V_out_write,
        if_dout => img_3_rows_V_c_dout,
        if_empty_n => img_3_rows_V_c_empty_n,
        if_read => Duplicate270_U0_src_rows_V_read);

    img_3_cols_V_c_U : component fifo_w10_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_img_3_cols_V_out_din,
        if_full_n => img_3_cols_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_img_3_cols_V_out_write,
        if_dout => img_3_cols_V_c_dout,
        if_empty_n => img_3_cols_V_c_empty_n,
        if_read => Duplicate270_U0_src_cols_V_read);

    img_4_rows_V_c_U : component fifo_w10_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_img_4_rows_V_out_din,
        if_full_n => img_4_rows_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_img_4_rows_V_out_write,
        if_dout => img_4_rows_V_c_dout,
        if_empty_n => img_4_rows_V_c_empty_n,
        if_read => Duplicate_U0_src_rows_V_read);

    img_4_cols_V_c_U : component fifo_w10_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl7833_p_U0_img_4_cols_V_out_din,
        if_full_n => img_4_cols_V_c_full_n,
        if_write => Block_codeRepl7833_p_U0_img_4_cols_V_out_write,
        if_dout => img_4_cols_V_c_dout,
        if_empty_n => img_4_cols_V_c_empty_n,
        if_read => Duplicate_U0_src_cols_V_read);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => ex_enhancement_U0_inputImage_data_stream_0_V_read);

    img_0_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => ex_enhancement_U0_inputImage_data_stream_1_V_read);

    img_0_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => ex_enhancement_U0_inputImage_data_stream_2_V_read);

    I_enhanced_data_stre_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ex_enhancement_U0_I_enhanced_data_stream_V_din,
        if_full_n => I_enhanced_data_stre_full_n,
        if_write => ex_enhancement_U0_I_enhanced_data_stream_V_write,
        if_dout => I_enhanced_data_stre_dout,
        if_empty_n => I_enhanced_data_stre_empty_n,
        if_read => Duplicate266_U0_src_data_stream_V_read);

    I_enh1_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate266_U0_dst1_data_stream_V_din,
        if_full_n => I_enh1_data_stream_0_full_n,
        if_write => Duplicate266_U0_dst1_data_stream_V_write,
        if_dout => I_enh1_data_stream_0_dout,
        if_empty_n => I_enh1_data_stream_0_empty_n,
        if_read => Loop_loop_height_pro_U0_I_enh1_data_stream_0_V_read);

    I_enh2_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate266_U0_dst2_data_stream_V_din,
        if_full_n => I_enh2_data_stream_0_full_n,
        if_write => Duplicate266_U0_dst2_data_stream_V_write,
        if_dout => I_enh2_data_stream_0_dout,
        if_empty_n => I_enh2_data_stream_0_empty_n,
        if_read => AddWeighted_U0_src1_data_stream_V_read);

    img_1_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_loop_height_pro_U0_img_1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => Loop_loop_height_pro_U0_img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => Loop_loop_height_pro_1_U0_img_1_data_stream_0_V_read);

    Background_data_stre_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_loop_height_pro_1_U0_Background_data_stream_0_V_din,
        if_full_n => Background_data_stre_full_n,
        if_write => Loop_loop_height_pro_1_U0_Background_data_stream_0_V_write,
        if_dout => Background_data_stre_dout,
        if_empty_n => Background_data_stre_empty_n,
        if_read => AddWeighted_U0_src2_data_stream_V_read);

    img_2_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AddWeighted_U0_dst_data_stream_V_din,
        if_full_n => img_2_data_stream_0_full_n,
        if_write => AddWeighted_U0_dst_data_stream_V_write,
        if_dout => img_2_data_stream_0_dout,
        if_empty_n => img_2_data_stream_0_empty_n,
        if_read => Duplicate269_U0_src_data_stream_V_read);

    img_2_rows_V_c7940_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AddWeighted_U0_dst_rows_V_out_din,
        if_full_n => img_2_rows_V_c7940_full_n,
        if_write => AddWeighted_U0_dst_rows_V_out_write,
        if_dout => img_2_rows_V_c7940_dout,
        if_empty_n => img_2_rows_V_c7940_empty_n,
        if_read => Duplicate269_U0_src_rows_V_read);

    img_2_cols_V_c7941_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AddWeighted_U0_dst_cols_V_out_din,
        if_full_n => img_2_cols_V_c7941_full_n,
        if_write => AddWeighted_U0_dst_cols_V_out_write,
        if_dout => img_2_cols_V_c7941_dout,
        if_empty_n => img_2_cols_V_c7941_empty_n,
        if_read => Duplicate269_U0_src_cols_V_read);

    img_3_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate269_U0_dst1_data_stream_V_din,
        if_full_n => img_3_data_stream_0_full_n,
        if_write => Duplicate269_U0_dst1_data_stream_V_write,
        if_dout => img_3_data_stream_0_dout,
        if_empty_n => img_3_data_stream_0_empty_n,
        if_read => Duplicate270_U0_src_data_stream_V_read);

    img_4_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate269_U0_dst2_data_stream_V_din,
        if_full_n => img_4_data_stream_0_full_n,
        if_write => Duplicate269_U0_dst2_data_stream_V_write,
        if_dout => img_4_data_stream_0_dout,
        if_empty_n => img_4_data_stream_0_empty_n,
        if_read => Duplicate_U0_src_data_stream_V_read);

    img_8_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate270_U0_dst1_data_stream_V_din,
        if_full_n => img_8_data_stream_0_full_n,
        if_write => Duplicate270_U0_dst1_data_stream_V_write,
        if_dout => img_8_data_stream_0_dout,
        if_empty_n => img_8_data_stream_0_empty_n,
        if_read => mat2gray_U0_M_data_stream_V_read);

    img_9_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate270_U0_dst2_data_stream_V_din,
        if_full_n => img_9_data_stream_0_full_n,
        if_write => Duplicate270_U0_dst2_data_stream_V_write,
        if_dout => img_9_data_stream_0_dout,
        if_empty_n => img_9_data_stream_0_empty_n,
        if_read => adaptive_threshold_U0_IN_data_stream_V_read);

    img_10_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_V_din,
        if_full_n => img_10_data_stream_0_full_n,
        if_write => Duplicate_U0_dst1_data_stream_V_write,
        if_dout => img_10_data_stream_0_dout,
        if_empty_n => img_10_data_stream_0_empty_n,
        if_read => MinMaxLoc_U0_src_data_stream_V_read);

    img_11_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_V_din,
        if_full_n => img_11_data_stream_0_full_n,
        if_write => Duplicate_U0_dst2_data_stream_V_write,
        if_dout => img_11_data_stream_0_dout,
        if_empty_n => img_11_data_stream_0_empty_n,
        if_read => threshold_U0_IN_data_stream_V_read);

    min_value_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MinMaxLoc_U0_min_val_out_din,
        if_full_n => min_value_c_full_n,
        if_write => MinMaxLoc_U0_min_val_out_write,
        if_dout => min_value_c_dout,
        if_empty_n => min_value_c_empty_n,
        if_read => mat2gray_U0_min_value_read);

    max_value_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MinMaxLoc_U0_max_val_out_din,
        if_full_n => max_value_c_full_n,
        if_write => MinMaxLoc_U0_max_val_out_write,
        if_dout => max_value_c_dout,
        if_empty_n => max_value_c_empty_n,
        if_read => mat2gray_U0_max_value_read);

    img_5_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mat2gray_U0_I_data_stream_V_din,
        if_full_n => img_5_data_stream_0_full_n,
        if_write => mat2gray_U0_I_data_stream_V_write,
        if_dout => img_5_data_stream_0_dout,
        if_empty_n => img_5_data_stream_0_empty_n,
        if_read => mean_filter_2D_U0_img_in_data_stream_V_read);

    img_6_data_stream_0_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mean_filter_2D_U0_img_out_data_stream_V_din,
        if_full_n => img_6_data_stream_0_full_n,
        if_write => mean_filter_2D_U0_img_out_data_stream_V_write,
        if_dout => img_6_data_stream_0_dout,
        if_empty_n => img_6_data_stream_0_empty_n,
        if_read => adaptive_threshold_U0_IN1_data_stream_V_read);

    help_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adaptive_threshold_U0_help_V_V_din,
        if_full_n => help_V_V_full_n,
        if_write => adaptive_threshold_U0_help_V_V_write,
        if_dout => help_V_V_dout,
        if_empty_n => help_V_V_empty_n,
        if_read => AXIstream2Mat_U0_help_V_V_read);

    Luminance_img_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => threshold_U0_Luminance_img_V_V_din,
        if_full_n => Luminance_img_V_V_full_n,
        if_write => threshold_U0_Luminance_img_V_V_write,
        if_dout => Luminance_img_V_V_dout,
        if_empty_n => Luminance_img_V_V_empty_n,
        if_read => ccl_U0_Luminance_img_V_V_read);

    LI_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ccl_U0_LI_V_V_din,
        if_full_n => LI_V_V_full_n,
        if_write => ccl_U0_LI_V_V_write,
        if_dout => LI_V_V_dout,
        if_empty_n => LI_V_V_empty_n,
        if_read => AXIstream2Mat_U0_LI_V_V_read);

    img_12_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIstream2Mat_U0_my_image_data_stream_0_V_din,
        if_full_n => img_12_data_stream_0_full_n,
        if_write => AXIstream2Mat_U0_my_image_data_stream_0_V_write,
        if_dout => img_12_data_stream_0_dout,
        if_empty_n => img_12_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_12_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIstream2Mat_U0_my_image_data_stream_1_V_din,
        if_full_n => img_12_data_stream_1_full_n,
        if_write => AXIstream2Mat_U0_my_image_data_stream_1_V_write,
        if_dout => img_12_data_stream_1_dout,
        if_empty_n => img_12_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img_12_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIstream2Mat_U0_my_image_data_stream_2_V_din,
        if_full_n => img_12_data_stream_2_full_n,
        if_write => AXIstream2Mat_U0_my_image_data_stream_2_V_write,
        if_dout => img_12_data_stream_2_dout,
        if_empty_n => img_12_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_DuplicaduH_U : component start_for_DuplicaduH
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate266_U0_din,
        if_full_n => start_for_Duplicate266_U0_full_n,
        if_write => Block_codeRepl7833_p_U0_start_write,
        if_dout => start_for_Duplicate266_U0_dout,
        if_empty_n => start_for_Duplicate266_U0_empty_n,
        if_read => Duplicate266_U0_ap_ready);

    start_for_AddWeigdvH_U : component start_for_AddWeigdvH
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AddWeighted_U0_din,
        if_full_n => start_for_AddWeighted_U0_full_n,
        if_write => Block_codeRepl7833_p_U0_start_write,
        if_dout => start_for_AddWeighted_U0_dout,
        if_empty_n => start_for_AddWeighted_U0_empty_n,
        if_read => AddWeighted_U0_ap_ready);

    start_for_DuplicadwH_U : component start_for_DuplicadwH
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate270_U0_din,
        if_full_n => start_for_Duplicate270_U0_full_n,
        if_write => Block_codeRepl7833_p_U0_start_write,
        if_dout => start_for_Duplicate270_U0_dout,
        if_empty_n => start_for_Duplicate270_U0_empty_n,
        if_read => Duplicate270_U0_ap_ready);

    start_for_DuplicadxH_U : component start_for_DuplicadxH
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => Block_codeRepl7833_p_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_ex_enhadyH_U : component start_for_ex_enhadyH
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ex_enhancement_U0_din,
        if_full_n => start_for_ex_enhancement_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_ex_enhancement_U0_dout,
        if_empty_n => start_for_ex_enhancement_U0_empty_n,
        if_read => ex_enhancement_U0_ap_ready);

    start_for_Loop_lodzI_U : component start_for_Loop_lodzI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_loop_height_pro_U0_din,
        if_full_n => start_for_Loop_loop_height_pro_U0_full_n,
        if_write => Duplicate266_U0_start_write,
        if_dout => start_for_Loop_loop_height_pro_U0_dout,
        if_empty_n => start_for_Loop_loop_height_pro_U0_empty_n,
        if_read => Loop_loop_height_pro_U0_ap_ready);

    start_for_Loop_lodAI_U : component start_for_Loop_lodAI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_loop_height_pro_1_U0_din,
        if_full_n => start_for_Loop_loop_height_pro_1_U0_full_n,
        if_write => Loop_loop_height_pro_U0_start_write,
        if_dout => start_for_Loop_loop_height_pro_1_U0_dout,
        if_empty_n => start_for_Loop_loop_height_pro_1_U0_empty_n,
        if_read => Loop_loop_height_pro_1_U0_ap_ready);

    start_for_DuplicadBI_U : component start_for_DuplicadBI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate269_U0_din,
        if_full_n => start_for_Duplicate269_U0_full_n,
        if_write => AddWeighted_U0_start_write,
        if_dout => start_for_Duplicate269_U0_dout,
        if_empty_n => start_for_Duplicate269_U0_empty_n,
        if_read => Duplicate269_U0_ap_ready);

    start_for_mat2gradCI_U : component start_for_mat2gradCI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_mat2gray_U0_din,
        if_full_n => start_for_mat2gray_U0_full_n,
        if_write => Duplicate270_U0_start_write,
        if_dout => start_for_mat2gray_U0_dout,
        if_empty_n => start_for_mat2gray_U0_empty_n,
        if_read => mat2gray_U0_ap_ready);

    start_for_adaptivdDI_U : component start_for_adaptivdDI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_adaptive_threshold_U0_din,
        if_full_n => start_for_adaptive_threshold_U0_full_n,
        if_write => Duplicate270_U0_start_write,
        if_dout => start_for_adaptive_threshold_U0_dout,
        if_empty_n => start_for_adaptive_threshold_U0_empty_n,
        if_read => adaptive_threshold_U0_ap_ready);

    start_for_MinMaxLdEI_U : component start_for_MinMaxLdEI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_MinMaxLoc_U0_din,
        if_full_n => start_for_MinMaxLoc_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_MinMaxLoc_U0_dout,
        if_empty_n => start_for_MinMaxLoc_U0_empty_n,
        if_read => MinMaxLoc_U0_ap_ready);

    start_for_threshodFJ_U : component start_for_threshodFJ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_threshold_U0_din,
        if_full_n => start_for_threshold_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_threshold_U0_dout,
        if_empty_n => start_for_threshold_U0_empty_n,
        if_read => threshold_U0_ap_ready);

    start_for_mean_fidGJ_U : component start_for_mean_fidGJ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_mean_filter_2D_U0_din,
        if_full_n => start_for_mean_filter_2D_U0_full_n,
        if_write => mat2gray_U0_start_write,
        if_dout => start_for_mean_filter_2D_U0_dout,
        if_empty_n => start_for_mean_filter_2D_U0_empty_n,
        if_read => mean_filter_2D_U0_ap_ready);

    start_for_AXIstredHJ_U : component start_for_AXIstredHJ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AXIstream2Mat_U0_din,
        if_full_n => start_for_AXIstream2Mat_U0_full_n,
        if_write => adaptive_threshold_U0_start_write,
        if_dout => start_for_AXIstream2Mat_U0_dout,
        if_empty_n => start_for_AXIstream2Mat_U0_empty_n,
        if_read => AXIstream2Mat_U0_ap_ready);

    start_for_ccl_U0_U : component start_for_ccl_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ccl_U0_din,
        if_full_n => start_for_ccl_U0_full_n,
        if_write => threshold_U0_start_write,
        if_dout => start_for_ccl_U0_dout,
        if_empty_n => start_for_ccl_U0_empty_n,
        if_read => ccl_U0_ap_ready);

    start_for_Mat2AXIdIJ_U : component start_for_Mat2AXIdIJ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => AXIstream2Mat_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_codeRepl7833_p_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_codeRepl7833_p_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_codeRepl7833_p_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_codeRepl7833_p_U0_ap_ready <= ap_sync_Block_codeRepl7833_p_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_codeRepl7833_p_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_codeRepl7833_p_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_codeRepl7833_p_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl7833_p_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_codeRepl7833_p_U0_ap_ready))) then 
                Block_codeRepl7833_p_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl7833_p_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIstream2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIstream2Mat_U0_ap_start <= start_for_AXIstream2Mat_U0_empty_n;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    AddWeighted_U0_ap_continue <= ap_const_logic_1;
    AddWeighted_U0_ap_start <= start_for_AddWeighted_U0_empty_n;
    Block_codeRepl7833_p_U0_ap_continue <= ap_const_logic_1;
    Block_codeRepl7833_p_U0_ap_start <= ((ap_sync_reg_Block_codeRepl7833_p_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_codeRepl7833_p_U0_start_full_n <= (start_for_Duplicate_U0_full_n and start_for_Duplicate270_U0_full_n and start_for_Duplicate266_U0_full_n and start_for_AddWeighted_U0_full_n);
    Duplicate266_U0_ap_continue <= ap_const_logic_1;
    Duplicate266_U0_ap_start <= start_for_Duplicate266_U0_empty_n;
    Duplicate269_U0_ap_continue <= ap_const_logic_1;
    Duplicate269_U0_ap_start <= start_for_Duplicate269_U0_empty_n;
    Duplicate269_U0_start_full_n <= ap_const_logic_1;
    Duplicate269_U0_start_write <= ap_const_logic_0;
    Duplicate270_U0_ap_continue <= ap_const_logic_1;
    Duplicate270_U0_ap_start <= start_for_Duplicate270_U0_empty_n;
    Duplicate270_U0_start_full_n <= (start_for_mat2gray_U0_full_n and start_for_adaptive_threshold_U0_full_n);
    Duplicate_U0_ap_continue <= ap_const_logic_1;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Duplicate_U0_start_full_n <= (start_for_threshold_U0_full_n and start_for_MinMaxLoc_U0_full_n);
    INPUT_STREAM_TREADY <= AXIvideo2Mat_U0_INPUT_STREAM_TREADY;
    Loop_loop_height_pro_1_U0_ap_continue <= ap_const_logic_1;
    Loop_loop_height_pro_1_U0_ap_start <= start_for_Loop_loop_height_pro_1_U0_empty_n;
    Loop_loop_height_pro_1_U0_start_full_n <= ap_const_logic_1;
    Loop_loop_height_pro_1_U0_start_write <= ap_const_logic_0;
    Loop_loop_height_pro_U0_ap_continue <= ap_const_logic_1;
    Loop_loop_height_pro_U0_ap_start <= start_for_Loop_loop_height_pro_U0_empty_n;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    MinMaxLoc_U0_ap_continue <= ap_const_logic_1;
    MinMaxLoc_U0_ap_start <= start_for_MinMaxLoc_U0_empty_n;
    MinMaxLoc_U0_start_full_n <= ap_const_logic_1;
    MinMaxLoc_U0_start_write <= ap_const_logic_0;
    OUTPUT_STREAM_TDATA <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID;
    adaptive_threshold_U0_ap_continue <= ap_const_logic_1;
    adaptive_threshold_U0_ap_start <= start_for_adaptive_threshold_U0_empty_n;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (threshold_U0_ap_idle and mean_filter_2D_U0_ap_idle and mat2gray_U0_ap_idle and ex_enhancement_U0_ap_idle and ccl_U0_ap_idle and adaptive_threshold_U0_ap_idle and MinMaxLoc_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Loop_loop_height_pro_U0_ap_idle and Loop_loop_height_pro_1_U0_ap_idle and Duplicate_U0_ap_idle and Duplicate270_U0_ap_idle and Duplicate269_U0_ap_idle and Duplicate266_U0_ap_idle and Block_codeRepl7833_p_U0_ap_idle and AddWeighted_U0_ap_idle and AXIvideo2Mat_U0_ap_idle and AXIstream2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_Block_codeRepl7833_p_U0_ap_ready <= (ap_sync_reg_Block_codeRepl7833_p_U0_ap_ready or Block_codeRepl7833_p_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= (ap_sync_Block_codeRepl7833_p_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    ccl_U0_ap_continue <= ap_const_logic_1;
    ccl_U0_ap_start <= start_for_ccl_U0_empty_n;
    ccl_U0_start_full_n <= ap_const_logic_1;
    ccl_U0_start_write <= ap_const_logic_0;
    ex_enhancement_U0_ap_continue <= ap_const_logic_1;
    ex_enhancement_U0_ap_start <= start_for_ex_enhancement_U0_empty_n;
    ex_enhancement_U0_start_full_n <= ap_const_logic_1;
    ex_enhancement_U0_start_write <= ap_const_logic_0;
    mat2gray_U0_ap_continue <= ap_const_logic_1;
    mat2gray_U0_ap_start <= start_for_mat2gray_U0_empty_n;
    mean_filter_2D_U0_ap_continue <= ap_const_logic_1;
    mean_filter_2D_U0_ap_start <= start_for_mean_filter_2D_U0_empty_n;
    mean_filter_2D_U0_start_full_n <= ap_const_logic_1;
    mean_filter_2D_U0_start_write <= ap_const_logic_0;
    start_for_AXIstream2Mat_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_AddWeighted_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate266_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate269_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate270_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_loop_height_pro_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_loop_height_pro_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_MinMaxLoc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_adaptive_threshold_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ccl_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ex_enhancement_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_mat2gray_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_mean_filter_2D_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_threshold_U0_din <= (0=>ap_const_logic_1, others=>'-');
    threshold_U0_ap_continue <= ap_const_logic_1;
    threshold_U0_ap_start <= start_for_threshold_U0_empty_n;
end behav;
