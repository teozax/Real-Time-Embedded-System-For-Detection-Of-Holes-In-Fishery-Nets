-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adaptive_threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    IN_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    IN_data_stream_V_empty_n : IN STD_LOGIC;
    IN_data_stream_V_read : OUT STD_LOGIC;
    IN1_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    IN1_data_stream_V_empty_n : IN STD_LOGIC;
    IN1_data_stream_V_read : OUT STD_LOGIC;
    help_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    help_V_V_full_n : IN STD_LOGIC;
    help_V_V_write : OUT STD_LOGIC );
end;


architecture behav of adaptive_threshold is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_1FA40 : STD_LOGIC_VECTOR (16 downto 0) := "11111101001000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv65_10624DD30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000110001001001101110100110000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv23_7ECCCD : STD_LOGIC_VECTOR (22 downto 0) := "11111101100110011001101";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal IN_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln887_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN1_data_stream_V_blk_n : STD_LOGIC;
    signal help_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln887_reg_297_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_103 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln887_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln887_reg_297_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_297_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln887_fu_120_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_63_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_316_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_322_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1148_fu_160_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1148_reg_328 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_59_reg_333 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_fu_180_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_339 : STD_LOGIC_VECTOR (64 downto 0);
    signal pix2_V_fu_273_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal pix2_V_reg_345 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal pix1_V_fu_149_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1148_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_V_fu_142_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_fu_186_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_58_fu_191_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln1148_fu_201_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln203_fu_207_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal neg_mul_fu_219_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_61_fu_224_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_62_fu_234_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_v10_v_fu_243_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln703_fu_250_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln1148_1_fu_213_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln703_fu_263_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_499_fu_256_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln703_fu_269_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln1497_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix2_V_2_fu_284_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_103 <= add_ln887_fu_120_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_103 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln887_reg_297 <= icmp_ln887_fu_114_p2;
                icmp_ln887_reg_297_pp0_iter1_reg <= icmp_ln887_reg_297;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln887_reg_297_pp0_iter2_reg <= icmp_ln887_reg_297_pp0_iter1_reg;
                icmp_ln887_reg_297_pp0_iter3_reg <= icmp_ln887_reg_297_pp0_iter2_reg;
                tmp_60_reg_322_pp0_iter2_reg <= tmp_60_reg_322;
                tmp_reg_316_pp0_iter2_reg <= tmp_reg_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_297_pp0_iter1_reg = ap_const_lv1_0))) then
                    mul_ln1148_reg_328(64 downto 16) <= mul_ln1148_fu_160_p2(64 downto 16);
                    mul_reg_339(64 downto 16) <= mul_fu_180_p2(64 downto 16);
                tmp_59_reg_333 <= mul_ln1148_fu_160_p2(64 downto 42);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_297_pp0_iter2_reg = ap_const_lv1_0))) then
                pix2_V_reg_345 <= pix2_V_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_60_reg_322 <= IN_data_stream_V_dout(15 downto 15);
                tmp_63_reg_306 <= IN_data_stream_V_dout;
                tmp_64_reg_311 <= IN1_data_stream_V_dout;
                tmp_reg_316 <= IN1_data_stream_V_dout(15 downto 15);
            end if;
        end if;
    end process;
    mul_ln1148_reg_328(15 downto 0) <= "0000000000000000";
    mul_reg_339(15 downto 0) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln887_fu_114_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln887_fu_114_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln887_fu_114_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    IN1_data_stream_V_blk_n_assign_proc : process(IN1_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln887_reg_297)
    begin
        if (((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN1_data_stream_V_blk_n <= IN1_data_stream_V_empty_n;
        else 
            IN1_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IN1_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln887_reg_297, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN1_data_stream_V_read <= ap_const_logic_1;
        else 
            IN1_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    IN_data_stream_V_blk_n_assign_proc : process(IN_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln887_reg_297)
    begin
        if (((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN_data_stream_V_blk_n <= IN_data_stream_V_empty_n;
        else 
            IN_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IN_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln887_reg_297, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN_data_stream_V_read <= ap_const_logic_1;
        else 
            IN_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln703_fu_263_p2 <= std_logic_vector(signed(ap_const_lv23_7ECCCD) + signed(select_ln1148_1_fu_213_p3));
    add_ln887_fu_120_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_103) + unsigned(ap_const_lv17_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(IN_data_stream_V_empty_n, IN1_data_stream_V_empty_n, help_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln887_reg_297, ap_enable_reg_pp0_iter4, icmp_ln887_reg_297_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln887_reg_297_pp0_iter3_reg = ap_const_lv1_0) and (help_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN1_data_stream_V_empty_n)) or ((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN_data_stream_V_empty_n)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(IN_data_stream_V_empty_n, IN1_data_stream_V_empty_n, help_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln887_reg_297, ap_enable_reg_pp0_iter4, icmp_ln887_reg_297_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln887_reg_297_pp0_iter3_reg = ap_const_lv1_0) and (help_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN1_data_stream_V_empty_n)) or ((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN_data_stream_V_empty_n)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(IN_data_stream_V_empty_n, IN1_data_stream_V_empty_n, help_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln887_reg_297, ap_enable_reg_pp0_iter4, icmp_ln887_reg_297_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln887_reg_297_pp0_iter3_reg = ap_const_lv1_0) and (help_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN1_data_stream_V_empty_n)) or ((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN_data_stream_V_empty_n)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(IN_data_stream_V_empty_n, IN1_data_stream_V_empty_n, icmp_ln887_reg_297)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN1_data_stream_V_empty_n)) or ((icmp_ln887_reg_297 = ap_const_lv1_0) and (ap_const_logic_0 = IN_data_stream_V_empty_n)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(help_V_V_full_n, icmp_ln887_reg_297_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((icmp_ln887_reg_297_pp0_iter3_reg = ap_const_lv1_0) and (help_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_114_p2)
    begin
        if ((icmp_ln887_fu_114_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    empty_499_fu_256_p3 <= 
        tmp_61_fu_224_p4 when (tmp_60_reg_322_pp0_iter2_reg(0) = '1') else 
        sub_ln703_fu_250_p2;

    help_V_V_blk_n_assign_proc : process(help_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln887_reg_297_pp0_iter3_reg)
    begin
        if (((icmp_ln887_reg_297_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            help_V_V_blk_n <= help_V_V_full_n;
        else 
            help_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    help_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix2_V_2_fu_284_p3),32));

    help_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln887_reg_297_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_297_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            help_V_V_write <= ap_const_logic_1;
        else 
            help_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1497_fu_279_p2 <= "1" when (signed(pix2_V_reg_345) < signed(ap_const_lv29_1)) else "0";
    icmp_ln887_fu_114_p2 <= "1" when (indvar_flatten_reg_103 = ap_const_lv17_1FA40) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_180_p1 <= pix_V_fu_142_p3;
    mul_fu_180_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_19999999A) * signed(mul_fu_180_p1))), 65));
    mul_ln1148_fu_160_p1 <= pix1_V_fu_149_p3;
    mul_ln1148_fu_160_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_10624DD30) * signed(mul_ln1148_fu_160_p1))), 65));
    neg_mul_fu_219_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_339));
    p_v10_v_fu_243_p3 <= 
        tmp_61_fu_224_p4 when (tmp_60_reg_322_pp0_iter2_reg(0) = '1') else 
        tmp_62_fu_234_p4;
    pix1_V_fu_149_p3 <= (tmp_64_reg_311 & ap_const_lv16_0);
    pix2_V_2_fu_284_p3 <= (icmp_ln1497_fu_279_p2 & ap_const_lv16_0);
    pix2_V_fu_273_p2 <= std_logic_vector(unsigned(empty_499_fu_256_p3) + unsigned(sext_ln703_fu_269_p1));
    pix_V_fu_142_p3 <= (tmp_63_reg_306 & ap_const_lv16_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln1148_1_fu_213_p3 <= 
        sub_ln203_fu_207_p2 when (tmp_reg_316_pp0_iter2_reg(0) = '1') else 
        tmp_59_reg_333;
    select_ln1148_fu_201_p3 <= 
        tmp_58_fu_191_p4 when (tmp_reg_316_pp0_iter2_reg(0) = '1') else 
        tmp_59_reg_333;
        sext_ln703_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_fu_263_p2),29));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1148_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1148_reg_328));
    sub_ln203_fu_207_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(select_ln1148_fu_201_p3));
    sub_ln703_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(p_v10_v_fu_243_p3));
    tmp_58_fu_191_p4 <= sub_ln1148_fu_186_p2(64 downto 42);
    tmp_61_fu_224_p4 <= neg_mul_fu_219_p2(64 downto 36);
    tmp_62_fu_234_p4 <= mul_reg_339(64 downto 36);
end behav;
